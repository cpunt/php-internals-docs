[[[id]]]
99626983

[[[name]]]
ZEND_USER_OPCODE_CONTINUE

[[[url]]]
zend_user_opcode_continue

[[[type]]]
macro

[[[declaration]]]
#define ZEND_USER_OPCODE_CONTINUE 0

[[[parameters]]]

[[[definition]]]

[[[source_location]]]
https://github.com/php/php-src/blob/7c9556db99a63449cc4b2635a560bacb63d868c9/Zend/zend_execute.h#L307

[[[description]]]
This return type for an overloaded opcode (see [`zend_set_user_opcode_handler`](https://phpinternals.net/docs/zend_set_user_opcode_handler)) means that execution of the overloaded opcode should be skipped.

See also:
 - [`ZEND_USER_OPCODE_DISPATCH`](https://phpinternals.net/docs/zend_user_opcode_dispatch)
 - [`ZEND_USER_OPCODE_RETURN`](https://phpinternals.net/docs/zend_user_opcode_return)
 - `ZEND_USER_OPCODE_ENTER`
 - `ZEND_USER_OPCODE_LEAVE`

[[[additional_information]]]
For example, if we wanted to simply output `Echo!` when either `echo` or `print` has been used, then we would add a handler to the [`ZEND_ECHO`](https://phpinternals.net/docs/zend_echo) opcode, like so:
```c
static inline int overload_echo(zend_execute_data *execute_data)
{
    php_printf("Echo!\n");
    ++EX(opline);
    return ZEND_USER_OPCODE_CONTINUE;
}

PHP_MINIT_FUNCTION(custom_extension)
{
    zend_set_user_opcode_handler(ZEND_ECHO, overload_echo);

    return SUCCESS;
}
```

Note that we have to manually increment the opline ourselves in order to skip the current opcode.

Now, executing the following PHP script:
```php
echo 1;
```

Outputs:
```
Echo!
```
