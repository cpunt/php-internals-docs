[[[id]]]
50959706

[[[name]]]
zval_ptr_dtor

[[[url]]]
zval_ptr_dtor

[[[type]]]
macro

[[[declaration]]]
#define zval_ptr_dtor(zval_ptr) _zval_ptr_dtor((zval_ptr) ZEND_FILE_LINE_CC)

[[[parameters]]]
zval_ptr
The zval to have its value free'd

[[[definition]]]
/* Definition for _zval_ptr_dtor */
ZEND_API void _zval_ptr_dtor(zval *zval_ptr ZEND_FILE_LINE_DC) /* {{{ */
{
	i_zval_ptr_dtor(zval_ptr ZEND_FILE_LINE_RELAY_CC);
}

/* Definition for i_zval_ptr_dtor */
static zend_always_inline void i_zval_ptr_dtor(zval *zval_ptr ZEND_FILE_LINE_DC)
{
	if (Z_REFCOUNTED_P(zval_ptr)) {
		zend_refcounted *ref = Z_COUNTED_P(zval_ptr);
		if (!--GC_REFCOUNT(ref)) {
			_zval_dtor_func(ref ZEND_FILE_LINE_RELAY_CC);
		} else {
			gc_check_possible_root(ref);
		}
	}
}

[[[source_location]]]
https://github.com/php/php-src/blob/40ecad34022b6e687cc654d47c88f8cef5d418fd/Zend/zend_variables.h#L87

[[[description]]]
This macro frees the value of a zval. It must be used on complex types that may contain cyclic references (arrays and objects - the collectable types, see [`GC_COLLECTABLE`](http://phpinternals.net/docs/gc_collectable)). This is because such types need to be placed in the GC root buffer, so that in the event that it does have a cyclic reference, it can eventually be free'd when all cycles in the GC root buffer are collected. (This expensive operation occurs in the event that the value's refcount does not hit zero when deleting a reference from it).

If it is known that the value is not a collectable, or that such a value definitely does not contain a cycle (such as an internally created array - this is done for performance), then the [`zval_dtor`](http://phpinternals.net/docs/zval_dtor) macro may be used instead.

[[[additional_information]]]
