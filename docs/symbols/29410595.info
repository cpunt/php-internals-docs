[[[id]]]
29410595

[[[name]]]
ZEND_CASE

[[[url]]]
zend_case

[[[type]]]
macro

[[[declaration]]]
#define ZEND_CASE 48

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(48, ZEND_CASE, CONST|TMPVAR|CV, CONST|TMPVAR|CV)
{
	USE_OPLINE
	zend_free_op free_op1, free_op2;
	zval *op1, *op2, *result;

	op1 = GET_OP1_ZVAL_PTR_UNDEF(BP_VAR_R);
	op2 = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
	do {
		int result;

		if (EXPECTED(Z_TYPE_P(op1) == IS_LONG)) {
			if (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) {
				result = (Z_LVAL_P(op1) == Z_LVAL_P(op2));
			} else if (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) {
				result = ((double)Z_LVAL_P(op1) == Z_DVAL_P(op2));
			} else {
				break;
			}
		} else if (EXPECTED(Z_TYPE_P(op1) == IS_DOUBLE)) {
			if (EXPECTED(Z_TYPE_P(op2) == IS_DOUBLE)) {
				result = (Z_DVAL_P(op1) == Z_DVAL_P(op2));
			} else if (EXPECTED(Z_TYPE_P(op2) == IS_LONG)) {
				result = (Z_DVAL_P(op1) == ((double)Z_LVAL_P(op2)));
			} else {
				break;
			}
		} else if (EXPECTED(Z_TYPE_P(op1) == IS_STRING)) {
			if (EXPECTED(Z_TYPE_P(op2) == IS_STRING)) {
				if (Z_STR_P(op1) == Z_STR_P(op2)) {
					result = 1;
				} else if (Z_STRVAL_P(op1)[0] > '9' || Z_STRVAL_P(op2)[0] > '9') {
					if (Z_STRLEN_P(op1) != Z_STRLEN_P(op2)) {
						result = 0;
					} else {
						result = (memcmp(Z_STRVAL_P(op1), Z_STRVAL_P(op2), Z_STRLEN_P(op1)) == 0);
					}
				} else {
					result = (zendi_smart_strcmp(Z_STR_P(op1), Z_STR_P(op2)) == 0);
				}
				FREE_OP2();
			} else {
				break;
			}
		} else {
			break;
		}
		ZEND_VM_SMART_BRANCH(result, 0);
		ZVAL_BOOL(EX_VAR(opline->result.var), result);
		ZEND_VM_NEXT_OPCODE();
	} while (0);

	SAVE_OPLINE();
	if (OP1_TYPE == IS_CV && UNEXPECTED(Z_TYPE_P(op1) == IS_UNDEF)) {
		op1 = GET_OP1_UNDEF_CV(op1, BP_VAR_R);
	}
	if (OP2_TYPE == IS_CV && UNEXPECTED(Z_TYPE_P(op2) == IS_UNDEF)) {
		op2 = GET_OP2_UNDEF_CV(op2, BP_VAR_R);
	}
	result = EX_VAR(opline->result.var);
	compare_function(result, op1, op2);
	ZVAL_BOOL(result, Z_LVAL_P(result) == 0);
	FREE_OP2();
	ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
}

[[[source_location]]]
https://github.com/php/php-src/blob/e2589b7d029cfe78316222493827876432cc1b88/Zend/zend_vm_def.h#L4806

[[[description]]]
This opcode is used to handle `switch` statements in PHP. Internally, a `switch` statement is a series of `ZEND_CASE` and `ZEND_JMPNZ` opcodes. If a comparison performed by `ZEND_CASE` matches, the `case` body is executed, and then a jump is performed by the next `ZEND_JMPNZ` opcode to exit from the rest of the comparison chain. This effectively makes a `switch` syntactic sugar for an `else if` chain, and gives it a linear (O(n)) lookup time.

In PHP 7.2, an optimisation was introduced to use a jump table for `case` values to provide constant (O(1)) lookup times. This is only done in certain cases - see the [`ZEND_SWITCH_LONG`](https://phpinternals.net/docs/zend_switch_long) and [`ZEND_SWITCH_STRING`](https://phpinternals.net/docs/zend_switch_string) opcodes for more information.

[[[additional_information]]]
For example, the following switch statement in PHP:
```
<?php

switch ('a') {
    case 1:break;
    case 'b':break;
    case 2:break;
    case 'c':break;
    case 3:break;
}
```

Will generate the following opcode dump (via [OPcache](https://phpinternals.net/categories/opcache)):
```
L0:     T0 = CASE string("a") int(1)
L1:     JMPNZ T0 L11
L2:     T0 = CASE string("a") string("b")
L3:     JMPNZ T0 L12
L4:     T0 = CASE string("a") int(2)
L5:     JMPNZ T0 L13
L6:     T0 = CASE string("a") string("c")
L7:     JMPNZ T0 L14
L8:     T0 = CASE string("a") int(3)
L9:     JMPNZ T0 L15
L10:    JMP L16
L11:    JMP L16
L12:    JMP L16
L13:    JMP L16
L14:    JMP L16
L15:    JMP L16
L16:    RETURN int(1)
```
