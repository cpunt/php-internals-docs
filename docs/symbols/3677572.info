[[[id]]]
3677572

[[[name]]]
zend_parse_parameters

[[[url]]]
zend_parse_parameters

[[[type]]]
function

[[[declaration]]]
ZEND_API int zend_parse_parameters(int num_args, const char *type_spec, ...);

[[[parameters]]]
num_args
The number of arguments provided by the function call. This is typically acquired by the `ZEND_NUM_ARGS` macro

type_spec
A string-literal detailing the parameter parsing of the function

...
The variables to store the parsed arguments in

[[[definition]]]
ZEND_API int zend_parse_parameters(int num_args, const char *type_spec, ...) /* {{{ */
{
	va_list va;
	int retval;
	int flags = 0;

	va_start(va, type_spec);
	retval = zend_parse_va_args(num_args, type_spec, &va, flags);
	va_end(va);

	return retval;
}

[[[source_location]]]
https://github.com/php/php-src/blob/d3bc8beb4ff9e00c3742ada32788239c3f7988e0/Zend/zend_API.c#L983

[[[description]]]
This is the old parameter parsing function. Upon failure to parse the arguments, an `E_WARNING` is emitted. The newer (macro-based) API is generally preferred now because it incurs less parsing overhead.

See the [Zend Parameter Parsing](https://phpinternals.net/categories/zend_parameter_parsing) category for details on the different type specifications its supports, along with examples of these in action.

[[[additional_information]]]
For example:
```c
PHP_FUNCTION(requires_double)
{
    double num;

    if (zend_parse_parameters(ZEND_NUM_ARGS(), "d", &num) == FAILURE) {
        return;
    }

    php_printf("%f\n", num);
```
