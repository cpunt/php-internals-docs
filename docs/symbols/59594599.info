[[[id]]]
59594599

[[[name]]]
zend_set_user_opcode_handler

[[[url]]]
zend_set_user_opcode_handler

[[[type]]]
function

[[[declaration]]]
ZEND_API int zend_set_user_opcode_handler(zend_uchar opcode, user_opcode_handler_t handler);

[[[parameters]]]
opcode
Any valid opcode (except for [`ZEND_USER_OPCODE`](https://phpinternals.net/docs/zend_user_opcode))

handler
The function to invoke when the specified opcode is found

[[[definition]]]
ZEND_API int zend_set_user_opcode_handler(zend_uchar opcode, user_opcode_handler_t handler)
{
	if (opcode != ZEND_USER_OPCODE) {
		if (handler == NULL) {
			/* restore the original handler */
			zend_user_opcodes[opcode] = opcode;
		} else {
			zend_user_opcodes[opcode] = ZEND_USER_OPCODE;
		}
		zend_user_opcode_handlers[opcode] = handler;
		return SUCCESS;
	}
	return FAILURE;
}

[[[source_location]]]
https://github.com/php/php-src/blob/d4268e6eb599b0c9841d062632c39e002b006c22/Zend/zend_execute.c#L3002

[[[description]]]
This API hook enables for a handler to be invoked before (optionally) interpreting the specified opcode.

See also the [`ZEND_USER_OPCODE`](https://phpinternals.net/docs/zend_user_opcode) opcode, as well as the following handler return types:
 - [`ZEND_USER_OPCODE_CONTINUE`](https://phpinternals.net/docs/zend_user_opcode_continue)
 - [`ZEND_USER_OPCODE_RETURN`](https://phpinternals.net/docs/zend_user_opcode_return)
 - [`ZEND_USER_OPCODE_DISPATCH`](https://phpinternals.net/docs/zend_user_opcode_dispatch)
 - `ZEND_USER_OPCODE_ENTER`
 - `ZEND_USER_OPCODE_LEAVE`

[[[additional_information]]]
For example, let's overload the [`ZEND_ECHO`](https://phpinternals.net/docs/zend_echo) opcode (used for the `echo` and `print` language constructs) to prepend the output with `Echoing `:
```c
static inline int overload_echo(zend_execute_data *execute_data) {
	php_printf("Echoing: ");
	return ZEND_USER_OPCODE_DISPATCH;
}

PHP_MINIT_FUNCTION(custom_extension)
{
	zend_set_user_opcode_handler(ZEND_ECHO, overload_echo);

	return SUCCESS;
}
```

The return of [`ZEND_USER_OPCODE_DISPATCH`](https://phpinternals.net/docs/zend_user_opcode_dispatch) is used to continue interpreting the current opcode ([`ZEND_ECHO`](https://phpinternals.net/docs/zend_echo)) as normal.

### How it Works

During the compilation stage, the second opcode pass [sets the handler for each opcode](https://github.com/php/php-src/blob/59c5d81bab53ed3c7916cfbe163a42dab177309b/Zend/zend_opcode.c#L655). This is done via:
```c
ZEND_API void zend_vm_set_opcode_handler(zend_op* op)
{
  op->handler = zend_vm_get_opcode_handler(zend_user_opcodes[op->opcode], op);
}
```

Notice the opcode lookup in the `zend_user_opcodes` array. If a handler has been set for an opcode, then [`ZEND_USER_OPCODE`](https://phpinternals.net/docs/zend_user_opcode) will be returned - if not, then the opcode itself will simply be returned. The handler (a function defined in the VM to interpret the opcode instruction) is then fetched for this opcode and set on the current [`zend_op`](https://phpinternals.net/docs/zend_op).

This means that an overloaded opcode will have the handler for [`ZEND_USER_OPCODE`](https://phpinternals.net/docs/zend_user_opcode) assigned to it instead, which looks as follows:
```c
ZEND_VM_HANDLER(150, ZEND_USER_OPCODE, ANY, ANY)
{
	USE_OPLINE
	int ret;

	SAVE_OPLINE();
	ret = zend_user_opcode_handlers[opline->opcode](execute_data);
	opline = EX(opline);

	// redacted
}
```

The custom handler we have set for this opcode then gets invoked, where the return value of our handler then tells the VM what the next action to take should be (skip to the next opcode, execute the original opcode handler, etc).

So the [`ZEND_USER_OPCODE`](https://phpinternals.net/docs/zend_user_opcode) opcode is never actually seen in the output of opcode dumps, because it is never directly generated during the compilation stage. Only its opcode handler is set.
