[[[id]]]
9134155

[[[name]]]
Z_PARAM_DOUBLE

[[[url]]]
z_param_double

[[[type]]]
macro

[[[declaration]]]
#define Z_PARAM_DOUBLE(dest) Z_PARAM_DOUBLE_EX(dest, _dummy, 0, 0)

[[[parameters]]]
dest
A `double` to store the parameter in

[[[definition]]]
/* Definition of Z_PARAM_DOUBLE_EX */
#define Z_PARAM_DOUBLE_EX(dest, is_null, check_null, separate) \
	Z_PARAM_DOUBLE_EX2(dest, is_null, check_null, separate, separate)

/* Definition of Z_PARAM_DOUBLE_EX2 */
#define Z_PARAM_DOUBLE_EX2(dest, is_null, check_null, deref, separate) \
		Z_PARAM_PROLOGUE(deref, separate); \
		if (UNEXPECTED(!zend_parse_arg_double(_arg, &dest, &is_null, check_null))) { \
			_expected_type = Z_EXPECTED_DOUBLE; \
			error_code = ZPP_ERROR_WRONG_ARG; \
			break; \
		}

[[[source_location]]]
https://github.com/php/php-src/blob/e33259f3104188f1d02122fde2b0ccdcf8a16c2b/Zend/zend_API.h#L879

[[[description]]]
Specify a parameter that should parsed as a double.

[[[additional_information]]]
For example, let's create a function called `split_float` that breaks a floating point number into its exponent and mantissa:
```c
/* argument information */
ZEND_BEGIN_ARG_INFO_EX(arginfo_split_float, 0, 0, 1)
	ZEND_ARG_INFO(0, arg)
ZEND_END_ARG_INFO()

/* array split_float(float $arg) */
PHP_FUNCTION(split_float)
{
	double num, exponent, mantissa;
	zval val;

	// new API
	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_DOUBLE(num)
	ZEND_PARSE_PARAMETERS_END();

	/* old API
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "d", &num) == FAILURE) {
		return;
	}
	*/
	
	array_init_size(return_value, 2);

	mantissa = modf(num, &exponent);

	ZVAL_LONG(&val, exponent);
	zend_hash_str_add_new(Z_ARRVAL_P(return_value), "exponent", sizeof("exponent") - 1, &val);
	ZVAL_DOUBLE(&val, mantissa);
	zend_hash_str_add_new(Z_ARRVAL_P(return_value), "mantissa", sizeof("mantissa") - 1, &val);
}
```

Usage:
```php
var_dump(split_float(123.1234));
```

Output:
```
array(2) {
  ["exponent"]=>
  int(123)
  ["mantissa"]=>
  float(0.1234)
}
```
