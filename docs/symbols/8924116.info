[[[id]]]
8924116

[[[name]]]
IS_ARRAY_IMMUTABLE

[[[url]]]
is_array_immutable

[[[type]]]
macro

[[[declaration]]]
#define IS_ARRAY_IMMUTABLE (1<<1)

[[[parameters]]]

[[[definition]]]

[[[source_location]]]
https://github.com/php/php-src/blob/840b77c02e23d3be8fdafc87ba192b1ab211245e/Zend/zend_types.h#L500

[[[description]]]
Immutable arrays are an optimisation technique introduced into PHP 7. They are used for arrays that can have their values determined completely at compile-time (so array elements can only be literal strings, floats, integers, and arrays themselves). This optimisation ensures that when such literal arrays are created inside of a loop, they are created only once, thereby reducing memory consumption.

Immutable arrays are:
 - not reference counted (see [`IS_TYPE_REFCOUNTED`](https://phpinternals.net/docs/is_type_refcounted))
 - not collectable (see [`GC_COLLECTABLE `](https://phpinternals.net/docs/gc_collectable))
 - not copyable (see [`IS_TYPE_COPYABLE`](https://phpinternals.net/docs/is_type_copyable))

Despite not being reference counted, immutable arrays still have a reference count. This is set to `2` and does not change. This ensures that when an immutable array needs to be modified (where a macro such as [`SEPARATE_ARRAY`](https://phpinternals.net/docs/separate_array) may be used), a hard copy of the array is made, leaving the immutable array intact (since it may be used elsewhere still), and the new array copy open to modifications.

This optimisation is apart of OPcache, and so it is only available when OPcache is enabled.

[[[additional_information]]]
