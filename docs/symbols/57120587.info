[[[id]]]
57120587

[[[name]]]
Z_PARAM_VARIADIC

[[[url]]]
z_param_variadic

[[[type]]]
macro

[[[declaration]]]
#define Z_PARAM_VARIADIC(spec, dest, dest_num) Z_PARAM_VARIADIC_EX(spec, dest, dest_num, 0)

[[[parameters]]]
spec
Either `'*'` or `'+'`. This is actually ignored, but is used to infer the expected behaviour

dest
A [`zval *`](https://phpinternals.net/docs/zval) that will store an array of `zval`s

dest_num
An `int` to store the count of `zval`s

[[[definition]]]
#define Z_PARAM_VARIADIC_EX(spec, dest, dest_num, post_varargs) do { \
		int _num_varargs = _num_args - _i - (post_varargs); \
		if (EXPECTED(_num_varargs > 0)) { \
			dest = _real_arg + 1; \
			dest_num = _num_varargs; \
			_i += _num_varargs; \
			_real_arg += _num_varargs; \
		} else { \
			dest = NULL; \
			dest_num = 0; \
		} \
	} while (0);

[[[source_location]]]
https://github.com/php/php-src/blob/0a86f159f435b7f9c34105516a80a30db534d23a/Zend/zend_API.h#L1108

[[[description]]]
Specify zero or more parameters. The minimum number of arguments is not actually controlled by the `*` or `+`, but rather by the minimum argument count specified in the [`ZEND_PARSE_PARAMETERS_START`](https://phpinternals.net/docs/zend_parse_parameters_start) macro.

[[[additional_information]]]
For example, let's simply create a function that accepts any amount of arguments and dumps them (like `var_dump` in PHP):
```c
/* Argument information */
ZEND_BEGIN_ARG_INFO_EX(arginfo_zval_dump, 0, 0, 1)
	ZEND_ARG_INFO(0, arg)
ZEND_END_ARG_INFO()

/* void zval_dump([mixed $arg...]) */
PHP_FUNCTION(zval_dump)
{
	zval *args;
	int argc = 0;

	// new API
	ZEND_PARSE_PARAMETERS_START(1, -1) // specify no max arg count
		Z_PARAM_VARIADIC('+', args, argc)
	ZEND_PARSE_PARAMETERS_END();

	/* old API
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "+", &args, &argc) == FAILURE) {
		return;
	}
	*/

	for (int i = 0; i < argc; ++i) {
		php_debug_zval_dump(args + i, 0);
	}
}
```

Usage:
```php
zval_dump(1, 'a');
```

Output:
```
int(1)
string(1) "a" refcount(1)
```
