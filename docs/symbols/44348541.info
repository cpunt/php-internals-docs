[[[id]]]
44348541

[[[name]]]
Z_PARAM_BOOL

[[[url]]]
z_param_bool

[[[type]]]
macro

[[[declaration]]]
#define Z_PARAM_BOOL(dest) Z_PARAM_BOOL_EX(dest, _dummy, 0, 0)

[[[parameters]]]
dest
A [`zend_bool`](https://phpinternals.net/docs/zend_bool) to store the parameter in

[[[definition]]]
/* Definition of Z_PARAM_BOOL_EX */
#define Z_PARAM_BOOL_EX(dest, is_null, check_null, separate) \
	Z_PARAM_BOOL_EX2(dest, is_null, check_null, separate, separate)

/* Definition of Z_PARAM_BOOL_EX2 */
#define Z_PARAM_BOOL_EX2(dest, is_null, check_null, deref, separate) \
		Z_PARAM_PROLOGUE(deref, separate); \
		if (UNEXPECTED(!zend_parse_arg_bool(_arg, &dest, &is_null, check_null))) { \
			_expected_type = Z_EXPECTED_BOOL; \
			error_code = ZPP_ERROR_WRONG_ARG; \
			break; \
		}

[[[source_location]]]
https://github.com/php/php-src/blob/3395e63d550e8b5237d13f70fc0a097a7ef17049/Zend/zend_API.h#L850

[[[description]]]
Specify a parameter that should parsed as a boolean.

[[[additional_information]]]
For example, let's create a function called `invert_bool` that takes a boolean and returns an inverted form of it:
```c
/* argument information */
ZEND_BEGIN_ARG_INFO_EX(arginfo_invert_bool, 0, 0, 1)
	ZEND_ARG_INFO(0, boolean)
ZEND_END_ARG_INFO()

/* bool invert_bool(bool $b) */
PHP_FUNCTION(invert_bool)
{
	zend_bool b;

	// new API
	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_BOOL(b)
	ZEND_PARSE_PARAMETERS_END();

	/* old API
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "b", &b) == FAILURE) {
		return;
	}
	*/

	RETVAL_BOOL(!b);
}
```

Usage:
```php
var_dump(invert_bool(false));
```

Output:
```
bool(true)
```
