[[[id]]]
5710221

[[[name]]]
Z_PARAM_ARRAY

[[[url]]]
z_param_array

[[[type]]]
macro

[[[declaration]]]
#define Z_PARAM_ARRAY(dest) Z_PARAM_ARRAY_EX(dest, 0, 0)

[[[parameters]]]
dest
A [`zval *`](https://phpinternals.net/docs/zval) to store the parameter in

[[[definition]]]
/* Definition of Z_PARAM_ARRAY_EX */
#define Z_PARAM_ARRAY_EX(dest, check_null, separate) \
	Z_PARAM_ARRAY_EX2(dest, check_null, separate, separate)

/* Definition of Z_PARAM_ARRAY_EX2 */
#define Z_PARAM_ARRAY_EX2(dest, check_null, deref, separate) \
		Z_PARAM_PROLOGUE(deref, separate); \
		if (UNEXPECTED(!zend_parse_arg_array(_arg, &dest, check_null, 0))) { \
			_expected_type = Z_EXPECTED_ARRAY; \
			error_code = ZPP_ERROR_WRONG_ARG; \
			break; \
		}

[[[source_location]]]
https://github.com/php/php-src/blob/9c2a1f52a5f087c70a9e91dc1f43e5718d1bd8b6/Zend/zend_API.h#L814

[[[description]]]
Specify a parameter that should parsed as an array into a [`zval`](https://phpinternals.net/docs/zval). Generally, the [`Z_PARAM_ARRAY_HT`](https://phpinternals.net/docs/z_param_array_ht) macro will be more helpful, since it more likely the array will only be needed for search or iterating through its hash table.

[[[additional_information]]]
For example, let's create a basic function called `sum_of_array` that accepts an array of integers and returns the sum of those integers (ignoring non-integers, overflow, etc):
```c
/* Argument information */
ZEND_BEGIN_ARG_INFO_EX(arginfo_sum_of_array, 0, 0, 1)
	ZEND_ARG_INFO(0, array)
ZEND_END_ARG_INFO()

/* int sum_of_array(array $a); */
PHP_FUNCTION(sum_of_array)
{
	zval *arg, *element;
	zend_long sum = 0;

	// new API
	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_ARRAY(arg)
	ZEND_PARSE_PARAMETERS_END();

	/* old API
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "a", &arg) != SUCCESS) {
	    return;
	}
	*/

	ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(arg), element) {
		if (Z_TYPE_P(element) == IS_LONG) {
			sum += Z_LVAL_P(element);
		}
	} ZEND_HASH_FOREACH_END();

	RETVAL_LONG(sum);
}
```

Usage:
```php
var_dump(sum_of_array([1,2,3]));
```

Output:
```
int(6)
```

In the above example, we only really needed the hash table value of the array (none of the additional stuff that comes with a [`zval`](https://phpinternals.net/docs/zval)). So we could have instead used the [`Z_PARAM_ARRAY_HT`](https://phpinternals.net/docs/z_param_array_ht) macro, and avoided the [`Z_ARRVAL_P`](https://phpinternals.net/docs/z_arrval) dereference.
