[[[id]]]
25167937

[[[name]]]
ZEND_BIND_LEXICAL

[[[url]]]
zend_bind_lexical

[[[type]]]
macro

[[[declaration]]]
#define ZEND_BIND_LEXICAL 182

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(182, ZEND_BIND_LEXICAL, TMP, CV, REF)
{
	USE_OPLINE
	zend_free_op free_op1, free_op2;
	zval *closure, *var;
	zend_string *var_name;

	closure = GET_OP1_ZVAL_PTR(BP_VAR_R);
	if (opline->extended_value) {
		/* By-ref binding */
		var = GET_OP2_ZVAL_PTR(BP_VAR_W);
		ZVAL_MAKE_REF(var);
		Z_ADDREF_P(var);
	} else {
		var = GET_OP2_ZVAL_PTR_UNDEF(BP_VAR_R);
		if (UNEXPECTED(Z_ISUNDEF_P(var))) {
			SAVE_OPLINE();
			var = GET_OP2_UNDEF_CV(var, BP_VAR_R);
			if (UNEXPECTED(EG(exception))) {
				HANDLE_EXCEPTION();
			}
		}
		ZVAL_DEREF(var);
		Z_TRY_ADDREF_P(var);
	}

	var_name = CV_DEF_OF(EX_VAR_TO_NUM(opline->op2.var));
	zend_closure_bind_var(closure, var_name, var);
	ZEND_VM_NEXT_OPCODE();
}

[[[source_location]]]
https://github.com/php/php-src/blob/a94fc577af6bfef3a623cded5aecc2dbb9710e85/Zend/zend_vm_def.h#L7894

[[[description]]]
This opcode is used by closures to bind variables from the outer scope to the closure's static variable table (all variables in a closure's `use` clause).

Additional information:
 - `op1` - the closure itself
 - `op2` - the CV being bound
 - `result` - ignored
 - `extended_value` - whether to bind the CV by reference
 - `op1_type` - TMP
 - `op2_type` - CV

[[[additional_information]]]
