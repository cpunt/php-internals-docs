[[[id]]]
13828192

[[[name]]]
zend_ast_process

[[[url]]]
zend_ast_process

[[[type]]]
variable

[[[declaration]]]
ZEND_API zend_ast_process_t zend_ast_process = NULL;

[[[parameters]]]

[[[definition]]]

[[[source_location]]]
https://github.com/php/php-src/blob/8826a563de8e0e37fcabf4217c4eed254ceb3092/Zend/zend_ast.c#L29

[[[description]]]
This hook provides a way to access the abstract syntax tree (AST) generated by the parser. It runs before the compiler itself iterates over the AST, enabling for it to be mutated. This can be set in the [request cycle](https://phpinternals.net/categories/extensions#phps-lifecycle).

[[[additional_information]]]
For example, let's say we would like to start a vendetta against the `declare` language construct. We can strip it out of the AST by hooking into it with the following function:
```c
PHP_RINIT_FUNCTION(ext_name)
{
    zend_ast_process = ast_hook;

    return SUCCESS;
}

void ast_hook(zend_ast *ast)
{
    // top node is always ZEND_AST_STMT_LIST
    zend_ast_list *list = zend_ast_get_list(ast);

    // ZEND_AST_DECLARE can only exist in the top scope
    for (int i = 0; i < list->children; ++i) {
        if (list->child[i]->kind == ZEND_AST_DECLARE) {
            zend_ast_destroy(list->child[i]);
            list->child[i] = NULL;
        }
    }
}
```

The following script:
```php
<?php

declare(strict_types=1); // this gets stripped

function a(string $a)
{
    var_dump($a);
}

a(1); // should throw a TypeError, but doesn't
```

Now outputs:
```
string(1) "1"
```
