[[[id]]]
62041650

[[[name]]]
ZEND_IN_ARRAY

[[[url]]]
zend_in_array

[[[type]]]
macro

[[[declaration]]]
#define ZEND_IN_ARRAY 189

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(189, ZEND_IN_ARRAY, CONST|TMP|VAR|CV, CONST, NUM)
{
	USE_OPLINE
	zend_free_op free_op1;
	zval *op1;
	HashTable *ht = Z_ARRVAL_P(EX_CONSTANT(opline->op2));
	int result;

	SAVE_OPLINE();
	op1 = GET_OP1_ZVAL_PTR_DEREF(BP_VAR_R);
	if (EXPECTED(Z_TYPE_P(op1) == IS_STRING)) {
		result = zend_hash_exists(ht, Z_STR_P(op1));
	} else if (opline->extended_value) {
		if (EXPECTED(Z_TYPE_P(op1) == IS_LONG)) {
			result = zend_hash_index_exists(ht, Z_LVAL_P(op1));
		} else {
			result = 0;
		}
	} else if (Z_TYPE_P(op1) <= IS_FALSE) {
		result = zend_hash_exists(ht, ZSTR_EMPTY_ALLOC());
	} else {
		zend_string *key;
		zval tmp;

		result = 0;
		ZEND_HASH_FOREACH_STR_KEY(ht, key) {
			ZVAL_STR(&tmp, key);
			compare_function(&tmp, op1, &tmp);
			if (Z_LVAL(tmp) == 0) {
				result = 1;
				break;
			}
		} ZEND_HASH_FOREACH_END();
	}
	FREE_OP1();
	ZEND_VM_SMART_BRANCH(result, 1);
	ZVAL_BOOL(EX_VAR(opline->result.var), result);
	ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
}

[[[source_location]]]
https://github.com/php/php-src/blob/dd15b34018db8a5ba48a79981f7915fd02092b9d/Zend/zend_vm_def.h#L8025

[[[description]]]
This opcode was introduced into PHP 7.2 as an optimisation technique for the [`in_array`](http://php.net/in_array) function. It works by inverting the array (which is the haystack being searched) at compile time, such that a hash table lookup can be performed at runtime (thereby changing the runtime from O(n) to O(1)). See the [Optimising Internal Functions via New Opcode Instructions](https://phpinternals.net/articles/optimising_internal_functions_via_new_opcode_instructions) article for further information (including benchmarks) on this.

Quick overview:
 - op1 - the needle being search for
 - op2 - the haystack being searched
 - result - a boolean result of whether the value was in the array or not
 - extended_value - whether the search is strict or not
 - op1_type - CONST|TMP|VAR|CV
 - op2_type - CONST

The optimisation is applied only if:
 - The array (haystack) is a literal value, along with all values in the array (constants are not supported)
 - The third parameter (if given) is a literal
 - Only certain values are used:
   - Strict mode allows for integers and strings to be used
   - Coercive mode (the default) only allows strings (that are not stringy-integers, such as `'1'`) to be used

[[[additional_information]]]
The new opcode means that the instructions generated by the compiler will be different for code such as the following:
```php
in_array('j', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']);
```

Previously, the opcode dump would look as follows:
```
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
  15     0  E >   INIT_FCALL                                               'in_array'
         1        SEND_VAL                                                 'j'
         2        SEND_VAL                                                 <array>
         3        DO_ICALL                                                 
  52     4      > RETURN                                                   1
```

But now, the opcode dump is as follows:
```
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
  15     0  E >   IN_ARRAY                                         ~0      'j', <array>
         1        FREE                                                     ~0
  52     2      > RETURN                                                   1
```

So by specialising the `in_array` function call, we have also removed the overhead of PHP's function calling routine, where only the new opcode instruction (along with an additional `FREE` instruction) needs to be executed. This makes the function much cheaper to execute when this optimisation technique is applicable.
