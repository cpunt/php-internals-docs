[[[id]]]
10545004

[[[name]]]
Z_REFCOUNT

[[[url]]]
z_refcount

[[[type]]]
macro

[[[declaration]]]
#define Z_REFCOUNT(z) Z_REFCOUNT_P(&(z))

[[[parameters]]]
z
The [`zval`](https://phpinternals.net/docs/zval) to fetch the reference count of

[[[definition]]]
/* Definition of Z_REFCOUNT_P */
#define Z_REFCOUNT_P(pz) zval_refcount_p(pz)

/* Definition of zval_refcount_p */
static zend_always_inline uint32_t zval_refcount_p(zval* pz) {
	ZEND_ASSERT(Z_REFCOUNTED_P(pz) || Z_COPYABLE_P(pz));
	return GC_REFCOUNT(Z_COUNTED_P(pz));
}

[[[source_location]]]
https://github.com/php/php-src/blob/31e4afe3c3654f9c5ab2eafa3a02c62d41c58b47/Zend/zend_types.h#L860

[[[description]]]
Fetches the reference count of a [`zval`](https://phpinternals.net/docs/zval). This `zval` must be a reference-counted type (see [`IS_TYPE_REFCOUNTED`](https://phpinternals.net/docs/is_type_refcounted)).

This macro also has a counterpart macro, `Z_REFCOUNT_P`, that accepts a pointer to a `zval` instead.

[[[additional_information]]]
For example:
```c
void get_refcount(zval *z)
{
    if (Z_REFCOUNTED_P(z)) {
        php_printf("zval reference count: %d\n", Z_REFCOUNT_P(z));
    } else {
        php_printf("This zval is not reference-counted\n");
    }
}
```
