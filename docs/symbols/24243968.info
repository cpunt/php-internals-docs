[[[id]]]
24243968

[[[name]]]
ZEND_ECHO

[[[url]]]
zend_echo

[[[type]]]
macro

[[[declaration]]]
#define ZEND_ECHO 40

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(40, ZEND_ECHO, CONST|TMPVAR|CV, ANY)
{
	USE_OPLINE
	zend_free_op free_op1;
	zval *z;

	SAVE_OPLINE();
	z = GET_OP1_ZVAL_PTR_UNDEF(BP_VAR_R);

	if (Z_TYPE_P(z) == IS_STRING) {
		zend_string *str = Z_STR_P(z);

		if (ZSTR_LEN(str) != 0) {
			zend_write(ZSTR_VAL(str), ZSTR_LEN(str));
		}
	} else {
		zend_string *str = _zval_get_string_func(z);

		if (ZSTR_LEN(str) != 0) {
			zend_write(ZSTR_VAL(str), ZSTR_LEN(str));
		} else if (OP1_TYPE == IS_CV && UNEXPECTED(Z_TYPE_P(z) == IS_UNDEF)) {
			GET_OP1_UNDEF_CV(z, BP_VAR_R);
		}
		zend_string_release(str);
	}

	FREE_OP1();
	ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
}

[[[source_location]]]
https://github.com/php/php-src/blob/59c5d81bab53ed3c7916cfbe163a42dab177309b/Zend/zend_vm_def.h#L1353

[[[description]]]
This opcode is used for both the `echo` and `print` language constructs. For `print`, its return value is set during the compilation phase (see [`zend_compile_print`](https://github.com/php/php-src/blob/c9223fd6b2b715680ea800fcde784c60fc25af8b/Zend/zend_compile.c#L7316)), and so the opcode handler does not have to worry about setting the return value.

Quick overview:
 - `op1` - the value being output
 - `op2` - unused
 - `result` - unused
 - `extended_value` - unused
 - `op1_type` - CONST|TMPVAR|CV
 - `op2_type` - ANY

[[[additional_information]]]
