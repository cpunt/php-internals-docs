[[[id]]]
60339983

[[[name]]]
ZEND_SWITCH_STRING

[[[url]]]
zend_switch_string

[[[type]]]
macro

[[[declaration]]]
#define ZEND_SWITCH_STRING 188

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(188, ZEND_SWITCH_STRING, CONST|TMPVAR|CV, CONST, JMP_ADDR)
{
	USE_OPLINE
	zend_free_op free_op1, free_op2;
	zval *op, *jump_zv;
	HashTable *jumptable;

	op = GET_OP1_ZVAL_PTR_UNDEF(BP_VAR_R);
	jumptable = Z_ARRVAL_P(GET_OP2_ZVAL_PTR(BP_VAR_R));

	if (Z_TYPE_P(op) != IS_STRING) {
		ZVAL_DEREF(op);
		if (Z_TYPE_P(op) != IS_STRING) {
			/* Wrong type, fall back to ZEND_CASE chain */
			ZEND_VM_NEXT_OPCODE();
		}
	}

	jump_zv = zend_hash_find(jumptable, Z_STR_P(op));
	if (jump_zv != NULL) {
		ZEND_VM_SET_RELATIVE_OPCODE(opline, Z_LVAL_P(jump_zv));
		ZEND_VM_CONTINUE();
	} else {
		/* default */
		ZEND_VM_SET_RELATIVE_OPCODE(opline, opline->extended_value);
		ZEND_VM_CONTINUE();
	}
}

[[[source_location]]]
https://github.com/php/php-src/blob/0eeaff09cbc82555658fa9f56f9d540a19b9aa06/Zend/zend_vm_def.h#L8060

[[[description]]]
This opcode was introduced into PHP 7.2 as an optimisation for `switch` statements on strings. It requires all `case` statements to hold literal strings, and the value being `switch`ed by must also be an string (not necessarily a literal, though). Mixing `case` types (strings with other types, here) is not allowed, and constants as `case` values are not yet supported.

It works by performing a look up into a jump table (a [hash table](https://phpinternals.net/docs/hashtable)) generated during the compilation phase, where each `case` value is used as a key in this hash table, and the corresponding value is the relative jump offset to skip to in the currently executing opline. This provides a constant-time search, rather than the linear-time approach used by the [`ZEND_CASE`](https://phpinternals.net/docs/zend_case) opcode.

The [`ZEND_CASE`](https://phpinternals.net/docs/zend_case) (and `ZEND_JMPNZ`) opcodes are still generated in the event that the value being `switch`ed upon (during runtime) does not have the same type as the jump table keys (`case` values).

Quick overview:
 - op1 - the value being `switch`ed by
 - op2 - unused
 - result - unused
 - extended_value - the relative jump offset of the default handler in the opline
 - op1_type - CONST|TMPVAR|CV
 - op2_type - CONST

See also the [`ZEND_SWITCH_LONG`](https://phpinternals.net/docs/zend_switch_long) opcode, which performs the same optimisation (but with integers).

[[[additional_information]]]
For example, the following `switch` statement in PHP:
```php
<?php

switch ('a') {
    case 'b':break;
    case 'c':break;
    case 'd':break;
    case 'e':break;
    case 'f':break;
}
```

Will generate the following opcode dump (via [OPcache](https://phpinternals.net/categories/opcache)):
```
L0:     SWITCH_STRING string("a") "b": L12, "c": L13, "d": L14, "e": L15, "f": L16, default: L17
L1:     T0 = CASE string("a") string("b")
L2:     JMPNZ T0 L12
L3:     T0 = CASE string("a") string("c")
L4:     JMPNZ T0 L13
L5:     T0 = CASE string("a") string("d")
L6:     JMPNZ T0 L14
L7:     T0 = CASE string("a") string("e")
L8:     JMPNZ T0 L15
L9:     T0 = CASE string("a") string("f")
L10:    JMPNZ T0 L16
L11:    JMP L17
L12:    JMP L17
L13:    JMP L17
L14:    JMP L17
L15:    JMP L17
L16:    JMP L17
L17:    RETURN int(1)
```

The `ZEND_SWITCH_STRING ` opcode will be executed first. If the key being searched for matches the jump table keys, then it will search the jump table for the next relative offset to jump to. Otherwise, the next opcode is executed (thereby using the [`ZEND_CASE`](https://phpinternals.net/docs/zend_case) approach).
