[[[id]]]
63166821

[[[name]]]
zend_arena_calloc

[[[url]]]
zend_arena_calloc

[[[type]]]
function

[[[declaration]]]
static zend_always_inline void* zend_arena_calloc(zend_arena **arena_ptr, size_t count, size_t unit_size);

[[[parameters]]]
arena_ptr
The arena to reserve memory from (a double indirection is required in case a new arena needs to be allocated)

count
The number of blocks to reserve

unit_size
The size of each block to reserve

[[[definition]]]
static zend_always_inline void* zend_arena_calloc(zend_arena **arena_ptr, size_t count, size_t unit_size)
{
	int overflow;
	size_t size;
	void *ret;

	size = zend_safe_address(unit_size, count, 0, &overflow);
	if (UNEXPECTED(overflow)) {
		zend_error(E_ERROR, "Possible integer overflow in zend_arena_calloc() (%zu * %zu)", unit_size, count);
	}
	ret = zend_arena_alloc(arena_ptr, size);
	memset(ret, 0, size);
	return ret;
}

[[[source_location]]]
https://github.com/php/php-src/blob/c18ba686cdf2d937475eb3d5c239e4ef8e733fa6/Zend/zend_arena.h#L81

[[[description]]]
This function effectively sub-allocates memory from the specified [`zend_arena`](http://phpinternals.net/docs/zend_arena) and sets all reserved memory to `0`. It does this by reserving `count` * `size` bytes from the arena, and then returns the address that points to the start of this reserved block of memory.

[[[additional_information]]]
