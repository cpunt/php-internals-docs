[[[id]]]
5896944

[[[name]]]
zval_dtor

[[[url]]]
zval_dtor

[[[type]]]
macro

[[[declaration]]]
#define zval_dtor(zvalue) zval_ptr_dtor_nogc(zvalue)

[[[parameters]]]
zvalue
The zval to have its value free'd

[[[definition]]]
/* Declaration for zval_ptr_dtor_nogc */
#define zval_ptr_dtor_nogc(zval_ptr) _zval_ptr_dtor_nogc((zval_ptr) ZEND_FILE_LINE_CC)

/* Definition for _zval_ptr_dtor_nogc */
static zend_always_inline void _zval_ptr_dtor_nogc(zval *zval_ptr ZEND_FILE_LINE_DC)
{
	if (Z_REFCOUNTED_P(zval_ptr) && !Z_DELREF_P(zval_ptr)) {
		_zval_dtor_func(Z_COUNTED_P(zval_ptr) ZEND_FILE_LINE_RELAY_CC);
	}
}

[[[source_location]]]
https://github.com/php/php-src/blob/40ecad34022b6e687cc654d47c88f8cef5d418fd/Zend/zend_variables.h#L86

[[[description]]]
This macro frees the value of a [zval](https://phpinternals.net/docs/zval). It should not be used on the collectable types (objects and arrays, see [`GC_COLLECTABLE`](https://phpinternals.net/docs/gc_collectable)), since these types may contain cyclic references (which need to be handled by the GC root buffer, otherwise there will be memory leaks). This macro does not add the value being free'd to the GC root buffer if the reference count does not reach `0`. Instead, arrays and objects must be free'd by the [`zval_ptr_dtor`](http://phpinternals.net/docs/zval_ptr_dtor) macro.

[[[additional_information]]]
