[[[id]]]
49143193

[[[name]]]
zend_throw_exception_hook

[[[url]]]
zend_throw_exception_hook

[[[type]]]
variable

[[[declaration]]]
ZEND_API void (*zend_throw_exception_hook)(zval *ex);

[[[parameters]]]

[[[definition]]]

[[[source_location]]]
https://github.com/php/php-src/blob/c9223fd6b2b715680ea800fcde784c60fc25af8b/Zend/zend_exceptions.c#L43

[[[description]]]
This hook is triggered when an exception is thrown, where the exception-throwing function itself (e.g. `zend_throw_exception`) invokes this handler. This makes it more of a pre-hook, since the VM knows nothing of the exception at the time the hook is executed.

The single parameter the hook accepts is an [`IS_OBJECT`](https://phpinternals.net/docs/is_object) [`zval`](https://phpinternals.net/docs/zval) that stores the thrown exception in.

This hook can be set in the [request cycle](https://phpinternals.net/categories/extensions#phps-lifecycle).

[[[additional_information]]]
For example, let's simply create a handler than nullifies the exception (so that all exceptions are simply ignored):
```c
PHP_RINIT_FUNCTION(typify)
{
	zend_throw_exception_hook = custom_throw_exception_hook;

	return SUCCESS;
}

void custom_throw_exception_hook(zval *ex)
{
	php_printf("Caught\n");
	zval_ptr_dtor(ex); // destroy the thrown object
	EG(exception) = NULL; // nullify it, as if it never happened
}
```

The following script:
```php
<?php

throw new Exception();
```

Will now output:
```
Caught
```
