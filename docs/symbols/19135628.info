[[[id]]]
19135628

[[[name]]]
Z_PARAM_LONG

[[[url]]]
z_param_long

[[[type]]]
macro

[[[declaration]]]
#define Z_PARAM_LONG(dest) Z_PARAM_LONG_EX(dest, _dummy, 0, 0)

[[[parameters]]]
dest
A [`zend_long`](https://phpinternals.net/docs/zend_long) to store the parameter in

[[[definition]]]
/* Definition of Z_PARAM_LONG_EX */
#define Z_PARAM_LONG_EX(dest, is_null, check_null, separate) \
	Z_PARAM_LONG_EX2(dest, is_null, check_null, separate, separate)

/* Definition of Z_PARAM_LONG_EX2 */
#define Z_PARAM_LONG_EX2(dest, is_null, check_null, deref, separate) \
		Z_PARAM_PROLOGUE(deref, separate); \
		if (UNEXPECTED(!zend_parse_arg_long(_arg, &dest, &is_null, check_null, 0))) { \
			_expected_type = Z_EXPECTED_LONG; \
			error_code = ZPP_ERROR_WRONG_ARG; \
			break; \
		}

[[[source_location]]]
https://github.com/php/php-src/blob/e33259f3104188f1d02122fde2b0ccdcf8a16c2b/Zend/zend_API.h#L946

[[[description]]]
Specify a parameter that should parsed as an integer. If a floating-point value is passed in that is outside of the integer range, then it will be rejected.

See also [`Z_PARAM_STRICT_LONG`](https://phpinternals.net/docs/z_param_strict_long), which will accept floating-point values that are outside of the integer range.

[[[additional_information]]]
For example, let's create a function called `bits_set` that counts the number of bits that are set in a number:
```c
/* argument information */
ZEND_BEGIN_ARG_INFO_EX(arginfo_bits_set, 0, 0, 1)
	ZEND_ARG_INFO(0, num)
ZEND_END_ARG_INFO()

/* int bits_set(int $num) */
PHP_FUNCTION(bits_set)
{
	zend_long num;

	// new API
	ZEND_PARSE_PARAMETERS_START(1, 1)
		Z_PARAM_LONG(num)
	ZEND_PARSE_PARAMETERS_END();

	/* old API
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &num) == FAILURE) {
		return;
	}
	*/
	
	num = (num & 0x5555555555555555ULL) + ((num >> 1) & 0x5555555555555555ULL);
    num = (num & 0x3333333333333333ULL) + ((num >> 2) & 0x3333333333333333ULL);
    num = (num & 0x0F0F0F0F0F0F0F0FULL) + ((num >> 4) & 0x0F0F0F0F0F0F0F0FULL);

	RETVAL_LONG((num * 0x0101010101010101ULL) >> 56);
}
```

Usage:
```php
var_dump(
    bits_set((1 << 15) - 1),
    bits_set(0b1010101)
);
```

Output:
```
int(15)
int(4)
```
