[[[id]]]
41860177

[[[name]]]
ZEND_ASSIGN_REF

[[[url]]]
zend_assign_ref

[[[type]]]
macro

[[[declaration]]]
#define ZEND_ASSIGN_REF 39

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(39, ZEND_ASSIGN_REF, VAR|CV, VAR|CV, SRC)
{
	USE_OPLINE
	zend_free_op free_op1, free_op2;
	zval *variable_ptr;
	zval *value_ptr;

	SAVE_OPLINE();
	value_ptr = GET_OP2_ZVAL_PTR_PTR(BP_VAR_W);
	variable_ptr = GET_OP1_ZVAL_PTR_PTR_UNDEF(BP_VAR_W);

	if (OP1_TYPE == IS_VAR &&
	    UNEXPECTED(Z_TYPE_P(EX_VAR(opline->op1.var)) != IS_INDIRECT) &&
	    UNEXPECTED(!Z_ISREF_P(EX_VAR(opline->op1.var))) &&
	    UNEXPECTED(!Z_ISERROR_P(EX_VAR(opline->op1.var)))) {

		zend_throw_error(NULL, "Cannot assign by reference to overloaded object");
		FREE_OP1_VAR_PTR();
		FREE_OP2_VAR_PTR();
		UNDEF_RESULT();
		HANDLE_EXCEPTION();

	} else if (OP2_TYPE == IS_VAR &&
	           opline->extended_value == ZEND_RETURNS_FUNCTION &&
			   UNEXPECTED(!Z_ISREF_P(value_ptr))) {
		zend_error(E_NOTICE, "Only variables should be assigned by reference");
		if (UNEXPECTED(EG(exception) != NULL)) {
			FREE_OP2_VAR_PTR();
			UNDEF_RESULT();
			HANDLE_EXCEPTION();
		}

		value_ptr = zend_assign_to_variable(variable_ptr, value_ptr, OP2_TYPE);
		if (UNEXPECTED(RETURN_VALUE_USED(opline))) {
			ZVAL_COPY(EX_VAR(opline->result.var), value_ptr);
		}
		/* zend_assign_to_variable() always takes care of op2, never free it! */

	} else {

		if ((OP1_TYPE == IS_VAR && UNEXPECTED(Z_ISERROR_P(variable_ptr))) ||
		    (OP2_TYPE == IS_VAR && UNEXPECTED(Z_ISERROR_P(value_ptr)))) {
			variable_ptr = &EG(uninitialized_zval);
		} else {
			zend_assign_to_variable_reference(variable_ptr, value_ptr);
		}

		if (UNEXPECTED(RETURN_VALUE_USED(opline))) {
			ZVAL_COPY(EX_VAR(opline->result.var), variable_ptr);
		}

		FREE_OP2_VAR_PTR();
	}

	FREE_OP1_VAR_PTR();
	ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
}

[[[source_location]]]
https://github.com/php/php-src/blob/dd15b34018db8a5ba48a79981f7915fd02092b9d/Zend/zend_vm_def.h#L2288

[[[description]]]
This opcode is used for the assign-by-reference operator.

Quick overview:
 - `op1` - left operand
 - `op2` - right operand
 - `result` - value assigned
 - `extended_value` - unused
 - `op1_type` - VAR|CV
 - `op2_type` - VAR|CV

[[[additional_information]]]
