[[[id]]]
45843677

[[[name]]]
ZEND_HASH_FOREACH_KEY

[[[url]]]
zend_hash_foreach_key

[[[type]]]
macro

[[[declaration]]]
#define ZEND_HASH_FOREACH_KEY(ht, _h, _key)

[[[parameters]]]
ht
The [`HashTable *`](https://phpinternals.net/docs/hashtable) to iterate through

_h
The [`zend_long`](https://phpinternals.net/docs/zend_long) to store the key in

_key
The [`zend_string *`](https://phpinternals.net/docs/zend_string) to store the key in

[[[definition]]]
#define ZEND_HASH_FOREACH_KEY(ht, _h, _key) \
	ZEND_HASH_FOREACH(ht, 0); \
	_h = _p->h; \
	_key = _p->key;

[[[source_location]]]
https://github.com/php/php-src/blob/b1a8dcc001cdd44afc4529b01ac15a2c6400cbd6/Zend/zend_hash.h#L900

[[[description]]]
Iterates through the mixed numerical and string keys of a [`HashTable`](https://phpinternals.net/docs/hashtable). If the key is numerical, then the string key in `_key` will be `NULL`, otherwise, it will be set.

See also [`ZEND_HASH_FOREACH_NUM_KEY`](https://phpinternals.net/docs/zend_hash_foreach_num_key) to iterate through the numerical keys and [`ZEND_HASH_FOREACH_STR_KEY`](https://phpinternals.net/docs/zend_hash_foreach_str_key) to iterate through the string keys of a hash table.

[[[additional_information]]]
For example:
```c
void output_ht_keys(HashTable *ht)
{
	zend_long lkey;
	zend_string *skey;

	ZEND_HASH_FOREACH_KEY(ht, lkey, skey) {
		if (skey) { // string key
			php_printf("%s\n", ZSTR_VAL(skey));
		} else { // long key
			php_printf("%d\n", lkey);
		}
	} ZEND_HASH_FOREACH_END();
}
```

Applying the above to the following array:
```php
$a = [0 => 0, 'a' => 1];
```

Outputs:
```
0
a
```
