[[[id]]]
89757331

[[[name]]]
ZEND_USER_OPCODE_RETURN

[[[url]]]
zend_user_opcode_return

[[[type]]]
macro

[[[declaration]]]
#define ZEND_USER_OPCODE_RETURN 1

[[[parameters]]]

[[[definition]]]

[[[source_location]]]
https://github.com/php/php-src/blob/7c9556db99a63449cc4b2635a560bacb63d868c9/Zend/zend_execute.h#L308

[[[description]]]
This return type for an overloaded opcode (see [`zend_set_user_opcode_handler`](https://phpinternals.net/docs/zend_set_user_opcode_handler)) means that execution of the overloaded opcode should be skipped, and the currently executing function should be returned from (causing a PHP `null` to be the return value).

See also:
 - [`ZEND_USER_OPCODE_CONTINUE`](https://phpinternals.net/docs/zend_user_opcode_continue)
 - [`ZEND_USER_OPCODE_DISPATCH`](https://phpinternals.net/docs/zend_user_opcode_dispatch)
 - `ZEND_USER_OPCODE_ENTER`
 - `ZEND_USER_OPCODE_LEAVE`

[[[additional_information]]]
For example, let's overload the [`ZEND_ECHO`](https://phpinternals.net/docs/zend_echo) opcode to output `Echo!\n` instead of the value passed to echo, and then return from the currently executing function call:
```c
static inline int overload_echo(zend_execute_data *execute_data)
{
    php_printf("Echo!\n");
    return ZEND_USER_OPCODE_RETURN;
}

PHP_MINIT_FUNCTION(custom_extension)
{
    zend_set_user_opcode_handler(ZEND_ECHO, overload_echo);

    return SUCCESS;
}
```

Now, executing the following PHP script:
```php
var_dump(
    (function () {
        echo 1;
        return 2;
    })(),
    3
);
```

Outputs:
```
Echo!
NULL
int(3)
```
