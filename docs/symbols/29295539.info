[[[id]]]
29295539

[[[name]]]
zend_string_dup

[[[url]]]
zend_string_dup

[[[type]]]
function

[[[declaration]]]
static zend_always_inline zend_string *zend_string_dup(zend_string *s, int persistent)

[[[parameters]]]
s
The Zend string to duplicate

persistent
Whether to store it past the end of the request (see the Persistence section of the [Zend Strings](http://phpinternals.net/categories/zend_strings) category)

[[[definition]]]
static zend_always_inline zend_string *zend_string_dup(zend_string *s, int persistent)
{
	if (ZSTR_IS_INTERNED(s)) {
		return s;
	} else {
		return zend_string_init(ZSTR_VAL(s), ZSTR_LEN(s), persistent);
	}
}

[[[source_location]]]
https://github.com/php/php-src/blob/ace9fe53173974ec63f9e0357a6e8372ff5adb3b/Zend/zend_string.h#L192

[[[description]]]
Makes a hard copy a non-interned Zend string (i.e. actually copies it, rather than incrementing its reference count). If the string is interned, then it is simply returned.

[[[additional_information]]]
Example:
```c
ZEND_API void ZEND_FASTCALL _zval_copy_ctor_func(zval *zvalue ZEND_FILE_LINE_DC)
{
	if (EXPECTED(Z_TYPE_P(zvalue) == IS_ARRAY)) {
		ZVAL_ARR(zvalue, zend_array_dup(Z_ARRVAL_P(zvalue)));
	} else if (EXPECTED(Z_TYPE_P(zvalue) == IS_STRING) ||
	           EXPECTED(Z_TYPE_P(zvalue) == IS_CONSTANT)) {
		CHECK_ZVAL_STRING_REL(Z_STR_P(zvalue));
		Z_STR_P(zvalue) = zend_string_dup(Z_STR_P(zvalue), 0); // relevant line
	} else if (EXPECTED(Z_TYPE_P(zvalue) == IS_CONSTANT_AST)) {
		zend_ast *copy = zend_ast_copy(Z_ASTVAL_P(zvalue));
		ZVAL_NEW_AST(zvalue, copy);
	}
}
```

The above example makes use of `zend_string_dup` to make a new (hard) copy of the zval's string value when it is either a string or a constant. We can force this to take place when we update a string's value:
```php
$a = 'a';
$a .= 'a';
```

The hard copy above is performed because at the time of the copy, `$a` has a reference count of 2 (one for the original assignment and one for the second assignment). So the engine has to duplicate the value since it isn't sure where the other reference to the value is being used. Of course, we can see that the hard copy isn't technically required, since `$a`'s value is being updated instantly after it has been modified.
