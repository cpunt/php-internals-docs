[[[id]]]
90656531

[[[name]]]
ZEND_INIT_FCALL

[[[url]]]
zend_init_fcall

[[[type]]]
macro

[[[declaration]]]
#define ZEND_INIT_FCALL 61

[[[parameters]]]

[[[definition]]]
ZEND_VM_HOT_HANDLER(61, ZEND_INIT_FCALL, NUM, CONST, NUM)
{
	USE_OPLINE
	zend_free_op free_op2;
	zval *fname = GET_OP2_ZVAL_PTR(BP_VAR_R);
	zval *func;
	zend_function *fbc;
	zend_execute_data *call;

	fbc = CACHED_PTR(Z_CACHE_SLOT_P(fname));
	if (UNEXPECTED(fbc == NULL)) {
		func = zend_hash_find(EG(function_table), Z_STR_P(fname));
		if (UNEXPECTED(func == NULL)) {
		    SAVE_OPLINE();
			zend_throw_error(NULL, "Call to undefined function %s()", Z_STRVAL_P(fname));
			HANDLE_EXCEPTION();
		}
		fbc = Z_FUNC_P(func);
		CACHE_PTR(Z_CACHE_SLOT_P(fname), fbc);
		if (EXPECTED(fbc->type == ZEND_USER_FUNCTION) && UNEXPECTED(!fbc->op_array.run_time_cache)) {
			init_func_run_time_cache(&fbc->op_array);
		}
	}

	call = zend_vm_stack_push_call_frame_ex(
		opline->op1.num, ZEND_CALL_NESTED_FUNCTION,
		fbc, opline->extended_value, NULL, NULL);
	call->prev_execute_data = EX(call);
	EX(call) = call;

	ZEND_VM_NEXT_OPCODE();
}

[[[source_location]]]
https://github.com/php/php-src/blob/01ec14afa4b028a65c4b507babdd4cc6bd0b3395/Zend/zend_vm_def.h#L3394

[[[description]]]
This opcode is used for the simplest of function call types. If the function being called is known at compile time and is not namespaced, then this opcode will be used. It works by pushing a new call frame onto the VM's stack, and then setting the current scope as the parent scope of this new call frame. This new call frame is then used for the scope of the function call.

Quick overview:
 - `op1` - the amount of stack space required by this function call
 - `op2` - the lowercased function name
 - `result` - unused
 - `extended_value` - argument count (NUM type flag)
 - `op1_type` - NUM
 - `op2_type` - CONST

[[[additional_information]]]
Demonstrate ambiguity problem and solution here.
