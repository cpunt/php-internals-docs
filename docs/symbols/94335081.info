[[[id]]]
94335081

[[[name]]]
ZEND_BIND_STATIC

[[[url]]]
zend_bind_static

[[[type]]]
macro

[[[declaration]]]
#define ZEND_BIND_STATIC 183

[[[parameters]]]

[[[definition]]]
ZEND_VM_HANDLER(183, ZEND_BIND_STATIC, CV, CONST, REF)
{
	USE_OPLINE
	zend_free_op free_op1, free_op2;
	HashTable *ht;
	zval *varname;
	zval *value;
	zval *variable_ptr;

	variable_ptr = GET_OP1_ZVAL_PTR_PTR_UNDEF(BP_VAR_W);
	zval_ptr_dtor(variable_ptr);

	ht = EX(func)->op_array.static_variables;
	ZEND_ASSERT(ht != NULL);
	if (GC_REFCOUNT(ht) > 1) {
		if (!(GC_FLAGS(ht) & IS_ARRAY_IMMUTABLE)) {
			GC_REFCOUNT(ht)--;
		}
		EX(func)->op_array.static_variables = ht = zend_array_dup(ht);
	}

	varname = GET_OP2_ZVAL_PTR(BP_VAR_R);
	value = zend_hash_find(ht, Z_STR_P(varname));

	if (opline->extended_value) {
		if (Z_CONSTANT_P(value)) {
			SAVE_OPLINE();
			if (UNEXPECTED(zval_update_constant_ex(value, EX(func)->op_array.scope) != SUCCESS)) {
				ZVAL_NULL(variable_ptr);
				HANDLE_EXCEPTION();
			}
		}
		if (UNEXPECTED(!Z_ISREF_P(value))) {
			zend_reference *ref = (zend_reference*)emalloc(sizeof(zend_reference));
			GC_REFCOUNT(ref) = 2;
			GC_TYPE_INFO(ref) = IS_REFERENCE;
			ZVAL_COPY_VALUE(&ref->val, value);
			Z_REF_P(value) = ref;
			Z_TYPE_INFO_P(value) = IS_REFERENCE_EX;
			ZVAL_REF(variable_ptr, ref);
		} else {
			Z_ADDREF_P(value);
			ZVAL_REF(variable_ptr, Z_REF_P(value));
		}
	} else {
		ZVAL_COPY(variable_ptr, value);
	}

	ZEND_VM_NEXT_OPCODE();
}

[[[source_location]]]
https://github.com/php/php-src/blob/a94fc577af6bfef3a623cded5aecc2dbb9710e85/Zend/zend_vm_def.h#L7925

[[[description]]]


Additional information:
 - `op1` - the static variable
 - `op2` - the variable name
 - `result` - ignored
 - `extended_value` - whether to bind the static CV by reference
 - `op1_type` - CV
 - `op2_type` - CONST

[[[additional_information]]]
