[[[name]]]
Compiler

[[[url]]]
compiler

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]
implementing_new_language_constructs_via_opcode_extending
a_reimplementation_of_the_range_operator
implementing_a_range_operator_into_php

[[[symbols]]]
10127797
31237227
87367326
85949410

[[[body]]]
The compilation stage emits opcodes that will later be interpreted by the [Zend Virtual Machine](https://phpinternals.net/categories/zend_virtual_machine). It does this by recursively traversing the Abstract Syntax Tree (AST) produced by the [Parser](https://phpinternals.net/categories/parser).

Other than emitting opcodes, the compiler has a couple of other responsibilities. These include:
 - performing some optimisations
 - performing some error checking

Extensions, such as OPCache, come after the initial compilation stage to provide further optimisations at the opcode level.

## Optimisations

A number of different optimisations are applied during the compilation phase. This is done to shift evaluation from runtime to compile time, so that the computation only has to be performed once. Only optimisations at the AST level are covered here - for optimisations at the opcode level, see [OPcache](https://phpinternals.net/categories/opcache).

The following optimisations are performed:
 - **Constant operation folding** - where constant expressions are evaluated (involving arithmetic, boolean, and bitwise operations). For example, the expression `60 * 60 * 24` will be evaluated to `86400`
 - **Constant resolution** - built-in constants are automatically resolved
 - **Function evaluation** - where certain functions with a deterministic output that have been invoked with literal arguments are resolved. For example, `strlen('abc')` will be resolved to `3`. A list of the functions can be found at [zend_compile.c#L3644](https://github.com/php/php-src/blob/ce0669c892b5007f5f0e62f0457e779874f29861/Zend/zend_compile.c#L3644)

For example, without OPcache's optimisations, the following:
```php
if (PHP_VERSION === '7.1.1') {
    var_dump(is_int(24 * 60 * 60));
}
```

Yields:
```
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   5     0  E > > JMPZ                                                     <true>, ->5
   6     1    >   INIT_FCALL                                               'var_dump'
         2        TYPE_CHECK                                    4  ~0      86400
         3        SEND_VAL                                                 ~0
         4        DO_ICALL
   8     5    > > RETURN                                                   1
```

The `if` condition has been resolved to `true`, the arithmetic expression has been folded, and the `is_int` function call has been replaced with a simple type check. As we will see later on, OPcache will resolve such branching for us.

### Namespacing and Optimisations

To see what the output of the above script would look like without some of these optimisations, then simply add a namespace declaration to the script:
```php
namespace test;
if (PHP_VERSION === '7.1.1') {
    var_dump(is_int(24 * 60 * 60));
}
```

This will now output:
```
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   5     0  E >   FETCH_CONSTANT                                   ~0      'test%5CPHP_VERSION'
         1        IS_IDENTICAL                                     ~1      ~0, '7.1.1'
         2      > JMPZ                                                     ~1, ->9
   6     3    >   INIT_NS_FCALL_BY_NAME
         4        INIT_NS_FCALL_BY_NAME
         5        SEND_VAL_EX                                              86400
         6        DO_FCALL                                      0  $2
         7        BRK
         8        DO_FCALL                                      0
   8     9    > > RETURN                                                   1
```

The namespacing in the above script prevents these optimisations because the symbol names (of constants and functions) are referred to by their *qualified* names. This means that these symbols can only be resolved at *runtime*, due to the dynamic nature of PHP (class autoloading, dynamic declaration, conditional including, etc).

If we'd like to have the same optimisations applied to the above namespaced code, then we will need to use fully-qualified names for built-in constants and functions:
```php
namespace test;
if (\PHP_VERSION === '7.1.1') {
    \var_dump(\is_int(24 * 60 * 60));
}
```

This will now yield the exact same output as if there was no namespace declared:
```
line     #* E I O op                           fetch          ext  return  operands
-------------------------------------------------------------------------------------
   5     0  E > > JMPZ                                                     <true>, ->5
   6     1    >   INIT_FCALL                                               'var_dump'
         2        TYPE_CHECK                                    4  ~0      86400
         3        SEND_VAL                                                 ~0
         4        DO_ICALL
   8     5    > > RETURN                                                   1
```

## Error Checking

Some error checking can be performed at compile time, including:
 - returning a value from a void function
 - some member modifier checks (e.g. for duplicate modifiers)
 - naive `$this` checks (only usable within non-static methods, not reassignable, ...)
 - Redeclaration errors in the current scope (e.g. duplication function/class/goto label/... declarations)
 - language construct misuse (e.g. `declare` not being at the top of a script, `try` without a `catch` or `finally` block, using a non-positive number to `break` or `continue`, nesting class or namespace declarations, etc)
