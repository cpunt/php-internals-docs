[[[name]]]
Zend Memory Manager

[[[url]]]
zend_memory_manager

[[[subcategories]]]
garbage_collector

[[[supercategories]]]

[[[articles]]]

[[[symbols]]]
92431168
66160389
56027653
77808848
94628357
70463990
9762833
43301773

[[[body]]]
When needing to dynamically allocate and deallocate memory, the normal system allocation and deallocation functions (`malloc`, `calloc`, `free`, etc) are not used - instead, their counterpart macros (disguised as functions) are used. These macros (including [`emalloc`](https://phpinternals.net/docs/emalloc), [`ecalloc`](https://phpinternals.net/docs/ecalloc), and [`efree`](https://phpinternals.net/docs/efree)) are a part of the Zend Memory Manager (ZMM).

ZMM has a few responsibilities, including:
 - handling the cleanup of allocated memory when the Zend Engine bails out from erroring (such a fatal error from an invocation to something like `php_error_docref`).
 - keeping track of the amount of memory allocated for the current request to ensure that the amount of allocated memory does not surpass the `memory_limit` ini setting.

The ZMM is an infallible allocator, and so if it fails to allocate memory, then the Zend Engine will bail out with a fatal error. This means that `NULL` checks do not need to be performed on return values from the ZMM allocator macros.

By default, chunks of 2MB will be allocated by the OS to ZMM. This memory is then micromanaged by ZMM, where it keeps track of what memory it allocates and where. This is not only better for performance (to avoid allocation/deallocation overhead), but also enables the ZMM to free up all memory at the end of the [request cycle](https://phpinternals.net/categories/extensions#request-startup) to prevent any memory leaks.

This "paging" of memory from the OS to ZMM is PHP's *true* memory usage (`memory_get_usage(true)`), where as the memory allocated by the ZMM (what the PHP application actually uses) will always be lower (`memory_get_usage(false)`).

## Runtime Configuration

The ZMM can be configured at runtime through a couple of environment variables:
 - `USE_ZEND_ALLOC` - whether to use the ZMM allocator or the system allocator. Defaults to `1`
 - `USE_ZEND_ALLOC_HUGE_PAGES` - whether to use huge pages for allocation. This generally improves performance, but configuring OS support can be difficult, and if the number of huge pages runs out, then random segfaults will follow

## Persistent vs Non-Persistent Allocations

The allocator/deallocator macros are all prefixed with either `e`, denoting a normal memory allocation/deallocation, or `pe`, denoting a persistent memory allocation/deallocation.

Persistent allocations are not performed by ZMM (and so they are not tracked by the `memory_limit` ini setting), but instead by the system allocator. They are very rarely performed during the request cycle, since such allocations are typically used for things that are required across multiple requests. This means these allocations are primarily used during the [module startup](https://phpinternals.net/categories/extensions#module-startup) phase, where the ZMM has not yet been loaded.

## API Macros

The common  allocator/deallocator macros are:
 - [`emalloc`](https://phpinternals.net/docs/emalloc) and [`pemalloc`](https://phpinternals.net/docs/pemalloc)
 - [`ecalloc`](https://phpinternals.net/docs/ecalloc) and [`pecalloc`](https://phpinternals.net/docs/pecalloc)
 - [`erealloc`](https://phpinternals.net/docs/erealloc) and [`perealloc`](https://phpinternals.net/docs/perealloc)
 - [`estrdup`](https://phpinternals.net/docs/estrdup) and [`pestrdup`](https://phpinternals.net/docs/pestrdup)
 - [`estrndup`](https://phpinternals.net/docs/estrndup) and [`pestrndup`](https://phpinternals.net/docs/pestrndup)
 - [`efree`](https://phpinternals.net/docs/efree) and [`pefree`](https://phpinternals.net/docs/pefree)

## ZMM and Threading

The ZMM itself is not thread safe, and so it should not be manipulated by multiple threads. For extensions that wish to utilise multithreading to execute PHP code, a shared-nothing architecture should be employed. This can be achieved by mapping one thread to one request, where each request cycle will have its own separate ZMM heap space (accessed via that `AG` (allocator globals) macro), along with its own symbols (such as classes, interfaces, functions, etc). (This also means that the `memory_limit` ini setting cannot be relied upon for such multithreaded extensions, since it will apply per thread, rather than to all threads.)

## How it Works

When a [request cycle](https://phpinternals.net/categories/extensions#request-startup) starts up, the memory manager is initialised.

The custom heap is always enabled, where it can be one of 3 types:
 - `ZEND_MM_CUSTOM_HEAP_NONE` - use the default ZMM allocator
 - `ZEND_MM_CUSTOM_HEAP_STD` - use a custom-defined allocator (defaults to the system allocator). This can either be utilised by an extension for custom memory allocation, or by internals developers for [debugging PHP with Valgrind](https://phpinternals.net/categories/zend_debug_mode#disabling-zmm)
 - `ZEND_MM_CUSTOM_HEAP_DEBUG` - custom heap debug mode for extensions that wish to use a custom allocator

### Performing Memory Allocations

When a memory allocation is performed, some [debug information](https://phpinternals.net/categories/zend_memory_manager#tracking-memory-allocations-for-debug-mode) may be collected, along with some [heap statistics](https://phpinternals.net/categories/zend_memory_manager#statistics-collecting). The size of the allocation will depend upon how it is handled. Small allocations will be put into slots of a singly-linked list structure, which is allocated in one go (as one large allocation). Large allocations will also be in a singly-linked list, but are allocated separately.

### Tracking Memory Allocations for Debug Mode

If PHP is built in [debug mode](https://phpinternals.net/categories/zend_debug_mode), then debugging information will be collected to enable for memory leaks to be reported (only for when the default ZMM allocator is used). This information will be attached to the pointer of the newly allocated block of memory, and will include:
 - The size of memory requested - this will differ from the actual amount of memory allocated, due to alignment and the packaging of the debug information in with the allocated heap space.
 - The file name - the C file from which the allocation was performed in
 - Line number - the line number in the C file from which the allocation was performed from

### Statistics Collecting

Statistics collecting is always enabled, and collects the current amount of heap space used, along with the peak amount of heap space used. These statistics can be accessed from PHP via the [`memory_get_usage`](http://php.net/memory_get_usage) and [`memory_get_peak_usage`](http://php.net/memory_get_peak_usage) functions.

Whenever an allocation or deallocation is performed, these two statistics will be appropriately adjusted. It is important to note that statistic collecting only occurs via the default ZMM allocated (through macros such as [`emalloc`](https://phpinternals.net/docs/emalloc) and [`ecalloc`](https://phpinternals.net/docs/ecalloc). Any memory allocated via the system allocator (`malloc`, `calloc`, etc) will not be included. This means PHP's actual memory usage is typically higher than what will be reported.
