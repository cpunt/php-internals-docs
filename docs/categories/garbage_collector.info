[[[name]]]
Garbage Collector

[[[url]]]
garbage_collector

[[[subcategories]]]

[[[supercategories]]]
zend_memory_manager

[[[articles]]]

[[[symbols]]]
27590050
53241260
58788233
11678213
4438714
77688916
50959706
53429698
44985345
59545586
8161344
87371429
8584736
27895741
13462309
48057973
8924116
5896944
60583175
86944268
24811176
4100218
10545004
49228232
88405907
69743203
8580562
40485231

[[[body]]]
The garbage collector (GC) handles the cleaning up of resources for the PHP runtime. It uses a reference-based approach to handle complex types (that cannot be disabled), alongside a mark-and-sweep cycle detector to prevent self-referencing memory leaks (that can be disabled).

The GC is not used for simple types (null, boolean, integer, or float), since it would just introduce unnecessary overhead (as seen in PHP 5).

The following table shows GC information on the main types:
```
Type            | refcounted | collectable | copyable | immutable
----------------+------------+-------------+----------+----------
simple types    |            |             |          |
string          |      x     |             |     x    |
interned string |            |             |          |
array           |      x     |      x      |     x    |
immutable array |            |             |          |     x
object          |      x     |      x      |          |
resource        |      x     |             |          |
reference       |      x     |             |          |
```
(From [Internal value representation in PHP 7 - Part 1](http://nikic.github.io/2015/05/05/Internal-value-representation-in-PHP-7-part-1.html#zval-memory-management))

The GC utilises flags to provide information on how the value should be handled with respect to collection. The following flags are stored in the GC information (not all of these are GC-related - some are simply stored there for convenience):
 - Strings
   - [`IS_STR_PERSISTENT`](https://phpinternals.net/docs/is_str_persistent)
   - [`IS_STR_INTERNED`](https://phpinternals.net/docs/is_str_interned)
   - [`IS_STR_PERMANENT`](https://phpinternals.net/docs/is_str_permanent)
 - Objects
   - [`IS_OBJ_APPLY_COUNT`](https://phpinternals.net/docs/is_obj_apply_count) (not GC related)
   - [`IS_OBJ_DESTRUCTOR_CALLED`](https://phpinternals.net/docs/is_obj_destructor_called)
   - [`IS_OBJ_FREE_CALLED`](https://phpinternals.net/docs/is_obj_free_called)
   - [`IS_OBJ_USE_GUARDS `](https://phpinternals.net/docs/is_obj_use_guards) (not GC related)
   - [`IS_OBJ_HAS_GUARDS`](https://phpinternals.net/docs/is_obj_has_guards) (not GC related)
 - Arrays
   - [`IS_ARRAY_IMMUTABLE`](https://phpinternals.net/docs/is_array_immutable)

It also utilises types for similar reasons:
 - [`GC_COLLECTABLE`](https://phpinternals.net/docs/gc_collectable)

### Accessors

The garbage information can be accessed via a few different macros, including:
 - [`GC_TYPE`](https://phpinternals.net/docs/gc_type)
 - [`GC_FLAGS`](https://phpinternals.net/docs/gc_flags)
 - [`GC_INFO`](https://phpinternals.net/docs/gc_info)
 - [`GC_TYPE_INFO`](https://phpinternals.net/docs/gc_type_info)
 - [`GC_REFCOUNT`](https://phpinternals.net/docs/gc_refcount)


## The Reference-Based Collector

Reference counting is a way of tracking the number of places that refer to a particular value. Such references occur whenever a value is seemingly duplicated in PHP code. For example, let's take a look at some variable assignments with string values:
```php
$a = 'a';   //       $a = zval_1(zend_string, refcount=1, value='a')
$b = $a;    //  $a = $b = zval_1(zend_string, refcount=2, value='a')

$b = 'b';   //       $a = zval_1(zend_string, refcount=1, value='a')
            //       $b = zval_2(zend_string, refcount=1, value='b') <- separation
```

From the perspective of a PHP developer, this looks as if the string held in `$a` is duplicated when it is assigned to `$b`. But performing such a copy in these instances would be expensive and a waste of memory in many cases, since variables are not always mutated after assignment.

Internally, the [Zend String](https://phpinternals.net/categories/zend_strings) value `'a'` will simply have its reference count increased from `1` to `2`, since it now has two places referring to it (`$a` and `$b`).  If either `$a` or `$b` were to have their value modified, then given the value's reference count is greater than `1`, a separation (creating a new, hard copy) of the value occurs (otherwise we would see by-reference semantics everywhere). The logic of a separation operation can be seen in the [`SEPARATE_ZVAL`](https://phpinternals.net/docs/separate_zval) macro.

These semantics are, quite aptly, called Copy-on-Write (COW). The copy is postponed until it must be performed to improve both performance and memory consumption.

### Handling PHP References

PHP References are handled by the [`IS_REFERENCE`](https://phpinternals.net/docs/is_reference) type. This type will store GC information and point to another zval that contains the actual value. For example:
```php
$a = [];    //       $a = zval_1(zend_array, refcount=1, value=[])
$b = $a;    //  $a = $b = zval_1(zend_array, refcount=2, value=[])

$c = &$a;   //       $b = zval_1(zend_array, refcount=2, value=[])
            //              ^---------------------------------------v
            //  $a = $c = zval_2(zend_reference, refcount=2, value=zval_1(...))

$b[] = 1;   //       $b = zval_3(zend_array, refcount=1, value=[1]) <- separation
            //            zval_1(zend_array, refcount=1, value=[])
            //              ^---------------------------------------v
            //  $a = $c = zval_2(zend_reference, refcount=2, value=zval_1(...))
```

Reference-based garbage collection has a big drawback, though. It is unable to detect cyclic references, and so it leaks memory for such cases. This is where the second garbage collection mechanism comes into play: the cycle collector.


## The Mark-and-Sweep (Cycle) Collector

The cycle collector (first introduced into PHP 5.3) resolves the shortcomings of the reference-based collector. It does this by tracking the "roots" of any collectable type (see [`GC_COLLECTABLE`](https://phpinternals.net/docs/gc_collectable)) in a large buffer (able to store 10,000 values). ("Roots" here simply means the reference-counted, collectable values themselves.) It is usually referred to as the *GC root buffer*.

When a reference-counted zval has its reference count decremented, its new reference count is checked. If it is `0`, then the value is destroyed. But if it is not `0`, and the zval is a collectable, then it will be placed in the GC root buffer in case the rest of the references to it are cyclic. If they turn out to not be cyclic, then the reference count will eventually reach `0` and the value will be destroyed (if this is done before the cycle collector even runs, then it will be removed from the root buffer). But if any of the references to turn out to be cyclic, then the reference count will never reach `0`, and so the mark-and-sweep algorithm (described below) will be run.

An example of a cyclic reference is as follows:
```php
$a = new StdClass();
$a->b = $a;
```

Here, the reference count of `$a`'s value will never reach 0, since even when `$a` is no longer used, its reference count will only be decremented to `1`. The self-referencing `$b` property still maintains a reference to `$a`'s value.

### The Mark-and-Sweep Algorithm

When either the GC root buffer is full, or when the cycle detector is triggered manually via [`gc_collect_cycles()`](http://php.net/gc_collect_cycles), then a mark-and-sweep algorithm is performed. This algorithm utilises colours to better distinguish the different types of roots from one-another. In particular:
 - **Purple** - the root potentially has cyclic references
 - **Grey** - the root is being processed
 - **Black** - the root is still in use, and so it cannot be collected
 - **White** - the root is no longer used (refcount = 0), and so it can be collected

Broadly, this algorithm:
 - Marks all of the roots
 - Scans all of the roots
 - Collects any of the roots that can be freed

#### Marking

When a new root is inserted, it is considered as potentially having cyclic references, and so it is initially marked as purple. During the marking stage, all purple roots will be re-marked as grey, along with any child collectable values they hold (properties of an object or elements of an array). During this process, their reference counts will all be decremented by one. This depth-first search algorithm avoids decrementing the same reference counts multiple times (and leading to infinite recursion) by only traversing collectable values that are not yet marked as being grey.

#### Scanning

Next, all of the roots that are marked as grey are scanned. This is where they have their reference count checked to see if it has reached `0`. If it has, then it means the root contained a cycle and is no longer used. It is therefore marked as white, where it will be freed in the next stage. If the reference count is greater than `0`, then the root is still in use, and so it is marked as black and has its reference count incremented again. This algorithm, again, works in a depth-first traversal fashion (where it only traverses grey roots to prevent infinite recursion).

#### Collecting

Lastly, the roots are collected. If the root has been marked as black, then it is removed from the GC root buffer. If the root is white, then it is moved from the GC root buffer to a separate buffer, where all of the moved roots are then freed. This root marking will, again, be performing in using depth-first traversal.
