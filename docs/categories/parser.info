[[[name]]]
Parser

[[[url]]]
parser

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]
implementing_new_language_constructs_via_opcode_extending

[[[symbols]]]

[[[body]]]
The parsing stage takes the token stream from the [Lexer](https://phpinternals.net/categories/lexer) as input and outputs an Abstract Syntax Tree (AST).

The parser has two jobs:
 - verifying the validity of the token order by attempting to match them against any one of the grammar rules defined in its grammar file. This ensures that valid language constructs are being formed by the tokens in the token stream
 - generating the AST, which is a tree view of the source code that will be used during the next stage (compilation)

The parser is generated with [Bison](https://www.gnu.org/software/bison/) via the [zend_language_parser.y](https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y) (BNF) grammar file. PHP uses a LALR(1) (look ahead, left-to-right) context-free grammar. The look ahead part simply means that the parser is able to look `n` tokens ahead (`1`, in this case) to resolve any ambiguities it may encounter whilst parsing. The left-to-right part means that it parses the token stream from left-to-right.

We can view a form of the AST produced by the parser using the [`php-ast extension`](https://github.com/nikic/php-ast). This extension performs a few transformations upon the AST, preventing it from being directly exposed to PHP developers. This is done for a couple of reasons:
 - the AST is not particularly “clean” to work with (in terms of consistency and general usability)
 - the abstraction of the internal AST means that changes can be freely applied to it without risk breaking compatibility for PHP developers
