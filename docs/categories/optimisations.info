[[[name]]]
Optimisations

[[[url]]]
optimisations

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]
optimising_internal_functions_via_new_opcode_instructions

[[[symbols]]]
62041650
60339983
93151772
12473976
76867214
8924116
69670796

[[[body]]]
There have been many optimisations introduced into ZE. A few of them have been described below.

## PHP 7.3

 - JIT?

## PHP 7.2

 - [Hybrid VM threading model](https://phpinternals.net/categories/zend_virtual_machine#hybrid)
 - [New opcode instructions for certain built-in functions](https://phpinternals.net/articles/optimising_internal_functions_via_new_opcode_instructions)
 - Switch statement lookups (see the [`ZEND_SWITCH_LONG`](https://phpinternals.net/docs/zend_switch_long) and [`ZEND_SWITCH_STRING`](https://phpinternals.net/docs/zend_switch_string) opcodes)
 - Dead code elimination (OPcache)
 - Sparse conditional constant propagation (OPcache)

## PHP 7.1

 - Static single assignment (SSA) optimisations

## PHP 7.0

 - Immutable arrays (see [`IS_ARRAY_IMMUTABLE`](https://phpinternals.net/docs/is_array_immutable))
 - Faster parameter parsing API (see [Zend Parameter Parsing](https://phpinternals.net/categories/zend_parameter_parsing))
 - Packed hash tables (see [`HASH_FLAG_PACKED`](https://phpinternals.net/docs/hash_flag_packed))
 - Static key hash tables (see [`HASH_FLAG_STATIC_KEYS`](https://phpinternals.net/docs/hash_flag_static_keys))
## PHP 5.4

 - String interning (see [`IS_STR_INTERNED`](https://phpinternals.net/docs/is_str_interned))

## PHP 5.1

 - Compiled variables (see [`IS_CV`](https://phpinternals.net/docs/is_cv))
 - [Opcode handler specialisation](https://phpinternals.net/categories/zend_virtual_machine#opcode-handler-specialisation)
