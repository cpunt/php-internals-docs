[[[name]]]
Zend Strings

[[[url]]]
zend_strings

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]

[[[symbols]]]
71823373
839117
92431168
85497610
10856036
71833513
96946241
4100218
24811176
97344673
16671265
65989860
29593350
14116116
38062183
97238643
82979498
45837082
57022600
5443436
92238890
22300123
33579192
43301773
82814905
94536628
3473116
51730579
59468932
64522376
39919426
92250376
59054665
29295539
53241260
77688916
50769178
14345791
75567395
69504021
86111497

[[[body]]]
The Zend string API is used to handle the creation, manipulation, and cleanup of strings in the Zend engine. They are binary safe because they store both the string (as a character array) alongside the string's length.

There are a few different types of Zend strings, including:
 - Persistent (see [`IS_STR_PERSISTENT`](https://phpinternals.net/docs/is_str_persistent))
 - Interned (see [`IS_STR_INTERNED`](https://phpinternals.net/docs/is_str_interned))
 - Permanent (see [`IS_STR_PERMANENT`](https://phpinternals.net/docs/is_str_permanent))
 - Normal (none of the above)

Normal strings are the most common and are used for any request-related logic (such as dynamically created strings in PHP).

Relevant files:
 - [Zend/zend\_string.c](https://github.com/php/php-src/blob/21cd57e5f2d286ab77ab44a05d2d16c16e4f15e6/Zend/zend_string.c)
 - [Zend/zend\_string.h](https://github.com/php/php-src/blob/21cd57e5f2d286ab77ab44a05d2d16c16e4f15e6/Zend/zend_string.h)

The Zend String API is used for strings with a known, fixed length. Whilst it provides ways to resize the strings (such as `zend_string_realloc`), these functions will rarely be the suitable way of building strings of an unknown length. For such cases, the smart string API should be used.

## Smart Strings

Dealing with strings in C can be quite clunky, and so when a string needs to be dynamically built, the smart string API can be used. This API handles the reallocation of the string automatically when needed, allocating buffer space each time to ensure that the number of reallocations is minimised for greater performance (in exchange for a slightly higher memory consumption). This API comes in two forms: **Smart Str** and **Smart String**.

The Smart Str API internally uses [`zend_string`](https://phpinternals.net/docs/zend_string), whereas the Smart String API internally uses a character array.

The two APIs are very much the same (**\*** being either **str** or **string**):
 - `smart_*_append(dest, src)`
 - `smart_*_appends(dest, src)`
 - `smart_*_appends_ex(dest, src, what)`
 - `smart_*_appendl(dest, src, len)`
 - `smart_*_appendc(dest, c)`
 - `smart_*_append_long(dest, val)`
 - `smart_*_append_unsigned(dest, val)`
 - `smart_*_sets(dest, src)`
 - `smart_*_free`

The Smart Str API also has `smart_str_append_smart_str(dest, src)`.
