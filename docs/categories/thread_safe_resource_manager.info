[[[name]]]
Thread Safe Resource Manager

[[[url]]]
thread_safe_resource_manager

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]

[[[symbols]]]

[[[body]]]
The Thread Safe Resource Manager (TSRM) is used for multithreaded environments. It's typically hidden away behind `#ifdef`s in macro definitions, and only comes into play when PHP is built in Zend Thread Safety (ZTS) mode (via the `--enable-maintainer-zts` configuration setting). It brings with it a small overhead (namely on global lookups), and so ZTS mode should only be switched on when it is needed.

The TSRM works by protecting access to all global data *at the request level* (see [PHP's Lifecycle](https://phpinternals.net/categories/extensions#phps-lifecycle)). It does this by changing the way global data is stored when PHP is built in ZTS mode. For example, the `AG` macro (for accessing the allocator globals - used by the [ZMM](https://phpinternals.net/categories/zend_memory_manager)) is defined as follows:
```c
#ifdef ZTS
static int alloc_globals_id;
# define AG(v) ZEND_TSRMG(alloc_globals_id, zend_alloc_globals *, v)
#else
# define AG(v) (alloc_globals.v)
static zend_alloc_globals alloc_globals;
#endif
```

Here, when PHP is built in not thread-safe (NTS) mode, the global is declared as a true C global (providing very fast access). In ZTS mode, the global lookup must go through the TSRM...

...Module startup registers/initialises global data, request startup for an extension is where the TSRM allocates space inside of its table-like structure for all threads for the extension's (zend) globals...

## Multithreaded Web Servers

Once use-case where the TSRM is used for is when the web server that loads PHP uses threads for concurrency. For example, Apache will use its Worker MPM on Windows web servers, since processes (utilised by its Prefork model) are too slow. This enables for a single PHP process to play host to many request cycles, where each one is encapsulated within its own thread.

The following diagram shows this:
![multithreaded executing inside of the Zend Engine](https://i.imgur.com/1d0PyMk.png)

Whilst any data from the module initialisation stage (and prior to this) is shared amongst requests, any request-specific data is stored on a per-thread basis. The way the TSRM handles this is by using thread-local storage (TLS) for any globals, whereby each global has its own ID to access its own memory space. It's this separation of global data that enables multiple requests to run concurrently and in a safe manner inside of the Zend Engine.

## Multithreaded Extensions

The TSRM is also required by certain extensions - [pthreads](https://github.com/krakjoe/pthreads) is probably the best know example of this.

Pthreads has a rather unique requirement, however. It has to actually multithread PHP code, whereby multiple threads are able to interact with the currently executing PHP code. It is here that the limitations of the TSRM are really felt.

### Limitations of the TSRM

The TSRM was built to provide thread-safety *at the request level*, so that multithreaded web servers could spawn new requests via threads. What the TSRM does not cater for is when multiple threads would like to interact within *the same request cycle*. So support for threading inside of the Zend Engine is limited to *inter-request* threading, which is problematic since pthreads requires *intra-request* threading in order to multithread PHP code.

So how does pthreads tackle this problem? Given that it is *impossible* to *safely* multithread a single request, pthreads actually spins up a new request cycle (inside of a new thread) from within the current request. This means it effectively takes the same approach of mapping one PHP request cycle to one thread. It provides the illusion of having one request be multithreaded by replicating everything from that request. This includes copying all classes, interfaces, traits, functions, and so on from parent request cycle. This means that whenever a new thread executes the `Threaded::run` method, it executes within the new replicated context inside of its own request cycle.

This creative approach is really the only way to achieve the threading of PHP code, but it does have its drawbacks, though. One of the most complained about points is that everything must be serialisable when storing data on `Threaded` objects. This is due to the way the TSRM segregates data between request cycles, where the [Zend Memory Manager](https://phpinternals.net/categories/zend_memory_manager) gets its own heap space per thread. (Heap allocations must go through the ZMMs allocator globals, since it is not thread-safe, and so it requires protection from multiple requests using it concurrently.)

This is problematic because all values we see in PHP will be allocated by the ZMM on the heap, and since access to this goes through TLS, other request cycles cannot safely utilise this data. Attempting to do this will incur race conditions, and for more complex types where they can be reallocated (such as arrays), when the new heap space attempts to free the current memory address and allocate a new address with more space, it will notice that the address is not being tracked by it. (Again, this is due to the storing of the heap information for ZMM in TLS.) This causes the familiar `zend_mm_heap corruption` segmentation fault.

So how does pthreads handle this? Any data that is stored on a `Threaded` object (i.e. writing to its property table) will be serialised and allocated by the system allocator, rather than ZMM's allocator. (This is achievable by overriding the object property handlers, preventing the object's actual property table being written to.) This means that the heap space used by the `Threaded` objects are thread-agnostic, enabling for these objects to be safely passed between threads. When this data is retrieved (i.e. when reading a property of a `Threaded` object), the data will be unserialised and allocated by the heap of the ZMM from the current thread context.
