[[[name]]]
Lexer

[[[url]]]
lexer

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]
implementing_new_language_constructs_via_opcode_extending
a_reimplementation_of_the_range_operator
implementing_a_range_operator_into_php
implementing_a_digit_separator

[[[symbols]]]

[[[body]]]
PHP generates its lexer using [re2c](http://re2c.org) from the [zend\_language\_scanner.l](https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l) definition file.

We are able to see the output of the lexer from PHP by using [ext/tokenizer](https://github.com/php/php-src/tree/master/ext/tokenizer) (which is, itself, generated from the lexer definition file by the [tokenizer\_data\_gen.sh](https://github.com/php/php-src/blob/master/ext/tokenizer/tokenizer\_data\_gen.sh) script).

When lexing PHP source code, the lexer changes between a number of states:
```c
enum YYCONDTYPE {
	yycST_IN_SCRIPTING,
	yycST_LOOKING_FOR_PROPERTY,
	yycST_BACKQUOTE,
	yycST_DOUBLE_QUOTES,
	yycST_HEREDOC,
	yycST_LOOKING_FOR_VARNAME,
	yycST_VAR_OFFSET,
	yycINITIAL,
	yycST_END_HEREDOC,
	yycST_NOWDOC,
};
```
(See the [Zend/zend\_language\_scanner\_defs.h](https://github.com/php/php-src/blob/80745e69143cae33b8acbdcbecb0232738e5475a/Zend/zend_language_scanner_defs.h) file.)

These states give the lexer different matching contexts, enabling it to behave differently when it knows what to expect (i.e. by narrowing down what tokens it is able to match).
