[[[name]]]
Zend Debug Mode

[[[url]]]
zend_debug_mode

[[[subcategories]]]

[[[supercategories]]]

[[[articles]]]

[[[symbols]]]

[[[body]]]
Zend's debugging mode is used by internals developers when either developing [extensions](https://phpinternals.net/categories/extensions) or the runtime itself. It can be enabled via the `--enable-debug` configuration setting, and it brings with it the following changes:
 - enables debugging symbols
 - disables optimisation (`-O0`)
 - enables Zend assertions
 - warns when memory has not been free'd properly (leaving it up to the [ZMM](https://phpinternals.net/categories/zend_memory_manager) to handle)
 - performs a variety of other safety checks (such as `\0` termination of [Zend Strings](https://phpinternals.net/categories/zend_strings))

## Working with Valgrind

### Premature Unloading of Shared Extensions

Shared extensions are unloaded during the shutdown sequence of the ZE. This is problematic because it means context information will be lost (leading to lots of question marks) when Valgrind outputs a report of all memory issues. To prevent this, the `ZEND_DONT_UNLOAD_MODULES` environment variable can be set to `1` to prevent shared extensions from unloading during the shutdown sequence.

### Disabling ZMM

The ZMM can hide memory leaks, since it frees any memory that was not released at the end of the request cycle. To catch such errors, disable the ZMM with the `USE_ZEND_ALLOC=0` environment variable to cause all allocations to fall back to the system allocator (which will enable Valgrind to detect them).

### Signal Problems

Sometimes, Valgrind has problems with running the PHP binary due to signal problems. This outputs something similar to the following:
```
==4457== Warning: ignored attempt to set SIGUSR2 handler in sigaction();
==4457==          the SIGUSR2 signal is used internally by Valgrind
Could not startup.
```

If this occurs, then try configuring PHP with the `--disable-zend-signals` setting.
