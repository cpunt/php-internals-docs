[[[title]]]
Implementing New Language Constructs via Opcode Extending

[[[url]]]
implementing_new_language_constructs_via_opcode_extending

[[[date]]]
2017-09-11

[[[author]]]
Thomas Punt

[[[series_name]]]

[[[series_url]]]

[[[excerpt]]]
In this article, we will be implementing two new language constructs: `echoln` and `println`. These will be the counterparts of `echo` and `print`, where they will append a new line (`\n`) to their outputs. This will be done by extending the [`ZEND_ECHO`](http://phpinternals.net/docs/zend_echo) opcode (used by `echo` and `print`) to prevent unnecessary code duplication.

[[[body]]]
Opcodes are the basic instructions that PHP scripts are compiled down to. They are wrapped in [`zend_op`](https://phpinternals.net/docs/zend_op) structures to hold information on the operation being performed:
```c
struct _zend_op {
	const void *handler;
	znode_op op1;
	znode_op op2;
	znode_op result;
	uint32_t extended_value;
	uint32_t lineno;
	zend_uchar opcode;
	zend_uchar op1_type;
	zend_uchar op2_type;
	zend_uchar result_type;
};
```

The member we are interested in for this article is the `extended_value` member, where we are going to take a deeper look at how opcodes are extended and how they are handled in the VM. We will do this by extending the [`ZEND_ECHO`](http://phpinternals.net/docs/zend_echo) opcode (used by `echo` and `print`) by introducing two new language constructs: `echoln` and `println`. These will append a `\n` onto their outputs automatically (as commonly seen in other languages).

### Why Overload an Opcode?

The Zend VM has nearly 200 opcodes (at the time of writing), which makes the generated VM quite large (around 70k lines of code). With some operations being very similar to one-another, it can make sense to combine the functionality of these different operations into a single opcode to reduce the VM size. (Conversely, such cases can instead be specialised with their own separate opcodes, which may lead to small performance improvments (due to less branching in the VM).)

We refer to opcodes that have been overloaded as *extended opcodes*, and these can be seen in a number of places. For example, the [`ZEND_CAST`](https://phpinternals.net/docs/zend_cast) opcode has been extended to hold the type of the cast being performed (`bool`, `int`, `float`, etc). Also, the [`ZEND_BIND_LEXICAL`](https://phpinternals.net/docs/zend_bind_lexical) opcode uses its extended value to denote whether the argument is being passed by-reference or by-value.

The extended value of an opcode isn't just for distinguishing between behaviours - it's also a convenient place to store data extraneous data. For example, it is commonly used to store the relative jump offset of an opcode (e.g. the `ZEND_CATCH` opcode uses it to jump over the `catch` block if no exception was thrown in the `try` block).

## Implementing the New Language Constructs

This will require:
 - Updating [the Lexer](https://phpinternals.net/categories/lexer) to read these two new language constructs as tokens
 - Updating [the Parser](https://phpinternals.net/categories/parser) to recognise these tokens and generate the correct AST nodes for them
 - Updating [the Compiler](https://phpinternals.net/categories/compiler) to handle these AST nodes correctly
 - Updating [the Virtual Machine](https://phpinternals.net/categories/zend_virtual_machine) to recognise the extended value usage

I will only lightly cover the new implementation of these language constructs. For a more complete introduction on implementing syntactic features into PHP, see my [Implementing a Range Operator into PHP](https://phpinternals.net/articles/implementing_a_range_operator_into_php) article.

Also, we will be working off of the `PHP-7.2` branch of [php-src](https://github.com/php/php-src) for this article.

### Updating the Lexer

Firstly, the [Zend/zend_language_scanner.l](https://github.com/php/php-src/blob/c9223fd6b2b715680ea800fcde784c60fc25af8b/Zend/zend_language_scanner.l) file needs to be updated to enable the lexer to recognise these two strings as separate tokens (when in a scripting context). This can be done with the following:
```diff
+<ST_IN_SCRIPTING>"echoln" {
+	RETURN_TOKEN(T_ECHOLN);
+}
+
+<ST_IN_SCRIPTING>"println" {
+	RETURN_TOKEN(T_PRINTLN);
+}
```

Next, these two new tokens (`T_ECHOLN` and `T_PRINTLN`) must be declared in the [Zend/zend_language_parser.y](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y) file (in the [appropriate place](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y#L99)):
```diff
%token T_PRINT        "print (T_PRINT)"
+%token T_PRINTLN      "println (T_PRINTLN)"
@@ ... @@
%token T_ECHO       "echo (T_ECHO)"
+%token T_ECHOLN     "echoln (T_ECHOLN)"
```

Now, the tokens will be recognised by the lexer and parser, but attempting to retrieve their names from ext/tokenizer will fail:
```php
var_dump(token_name(token_get_all('<?php echoln 1;')[1][0])); // string(7) "UNKNOWN"
```

We must regenerate the tokenizer extension to recognise these new tokens:
```
cd ext/tokenizer && ./tokenizer_data_gen.sh && cd ../../
```

This now gives:
```php
var_dump(token_name(token_get_all('<?php echoln 1;')[1][0])); // string(8) "T_ECHOLN"
```

### Updating the Parser

Firstly, the associativity of the new `T_PRINTLN` token needs to be stated (in the [appropriate place](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y#L60)):
```diff
-%right T_PRINT
+%right T_PRINT T_PRINTLN
```

Next, the two new keywords need to be added to the [reserved non-modifiers list](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y#L269) to prevent them from being used elsewhere:
```diff
-	| T_CLASS_C | T_TRAIT_C | T_FUNC_C | T_METHOD_C | T_LINE | T_FILE | T_DIR | T_NS_C
+	| T_CLASS_C | T_TRAIT_C | T_FUNC_C | T_METHOD_C | T_LINE | T_FILE | T_DIR | T_NS_C | T_ECHOLN | T_PRINTLN
```

Now, the `T_PRINT` token rule needs to be updated to set the extended value (to `0`, meaning do not append a new line) of its corresponding AST node. The `T_PRINTLN` token will also need a new rule to be added and have its extended value (to `1`, meaning do append a new line). This is done in the [`expr_without_variable`](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y#L872) production rule (this rule does not prevent variables from being used with the constructs - it simply means that the expression isn't just a variable):
```diff
-	|	T_PRINT expr { $$ = zend_ast_create(ZEND_AST_PRINT, $2); }
+	|	T_PRINT expr { $$ = zend_ast_create_ex(ZEND_AST_PRINT, 0, $2); }
+	|	T_PRINTLN expr { $$ = zend_ast_create_ex(ZEND_AST_PRINT, 1, $2); }
```

Next, the `T_ECHOLN` token needs to be added to the [`statement`](https://github.com/php/php-src/blob/a6456f0a6cf33565c21f7d691c0f6672b7bc64b7/Zend/zend_language_parser.y#L422) production rule to enable for `echoln` to be used where a statement is expected:
```diff
	|	T_ECHO echo_expr_list ';'	{ $$ = $2; }
+	|	T_ECHOLN echoln_expr_list ';'	{ $$ = $2; }
```

Now, the `echo_expr_list` production rules needs to be updated to create a custom AST node (enabling for its extended value to be set). Also, a new `echoln_expr_list` production rule needs to be created to handle the `echoln` token:
```diff
 echo_expr:
-	expr { $$ = zend_ast_create(ZEND_AST_ECHO, $1); }
+	expr { $$ = zend_ast_create_ex(ZEND_AST_ECHO, 0, $1); }
 ;
+
+echoln_expr_list:
+		echo_expr_list ',' echoln_expr { $$ = zend_ast_list_add($1, $3); }
+	|	echoln_expr { $$ = zend_ast_create_list(1, ZEND_AST_STMT_LIST, $1); }
+;
+echoln_expr:
+	expr { $$ = zend_ast_create_ex(ZEND_AST_ECHO, 1, $1); }
+;
```

Finally, these two new production rules then need types declared for them in Bison since they are non-terminating:
```diff
-%type <ast> absolute_trait_method_reference trait_method_reference property echo_expr
+%type <ast> absolute_trait_method_reference trait_method_reference property echo_expr echoln_expr
@@ ... @@
-%type <ast> echo_expr_list unset_variables catch_name_list catch_list parameter_list class_statemen
t_list
+%type <ast> echo_expr_list unset_variables catch_name_list catch_list parameter_list class_statemen
t_list echoln_expr_list
```

### Updating the Compiler

Now, we must update the compilation of the `ZEND_AST_ECHO` and `ZEND_AST_PRINT` nodes. This is simply a matter of catering for the newly set extended value in the `zend_compile_echo` and `zend_compile_print ` functions, respectively (located in [Zend/zend_compile.c](https://github.com/php/php-src/blob/c9223fd6b2b715680ea800fcde784c60fc25af8b/Zend/zend_compile.c)):
```diff
void zend_compile_echo(zend_ast *ast) /* {{{ */
{
	zend_op *opline;
	zend_ast *expr_ast = ast->child[0];

	znode expr_node;
	zend_compile_expr(&expr_node, expr_ast);

	opline = zend_emit_op(NULL, ZEND_ECHO, &expr_node, NULL);
-	opline->extended_value = 0;
+	opline->extended_value = ast->attr;
}
@@ ... @@
void zend_compile_print(znode *result, zend_ast *ast) /* {{{ */
{
	zend_op *opline;
	zend_ast *expr_ast = ast->child[0];

	znode expr_node;
	zend_compile_expr(&expr_node, expr_ast);

	opline = zend_emit_op(NULL, ZEND_ECHO, &expr_node, NULL);
-	opline->extended_value = 1;
+	opline->extended_value = ast->attr;

	result->op_type = IS_CONST;
	ZVAL_LONG(&result->u.constant, 1);
}
```

Now, when the VM looks at the `ZEND_ECHO` opcode, it can now differentiate the behaviours to:
```
switch (extended_value) {
    case 0:
        // echo or print
    case 1:
        // echoln or println
}
```

### Updating the Virtual Machine

Now, we need to update the [Zend/zend_vm_def.h](https://github.com/php/php-src/blob/613bac9eb36d9aae6a7d91bd3852865f44106d12/Zend/zend_vm_def.h) file, where the VM's handler definition for `ZEND_ECHO` needs to cater for the new extended value:
```diff
ZEND_VM_HANDLER(40, ZEND_ECHO, CONST|TMPVAR|CV, ANY)
{
	USE_OPLINE
	zend_free_op free_op1;
	zval *z;

	SAVE_OPLINE();
	z = GET_OP1_ZVAL_PTR_UNDEF(BP_VAR_R);

	if (Z_TYPE_P(z) == IS_STRING) {
		zend_string *str = Z_STR_P(z);

		if (ZSTR_LEN(str) != 0) {
			zend_write(ZSTR_VAL(str), ZSTR_LEN(str));
		}
	} else {
		zend_string *str = _zval_get_string_func(z);

		if (ZSTR_LEN(str) != 0) {
			zend_write(ZSTR_VAL(str), ZSTR_LEN(str));
		} else if (OP1_TYPE == IS_CV && UNEXPECTED(Z_TYPE_P(z) == IS_UNDEF)) {
			GET_OP1_UNDEF_CV(z, BP_VAR_R);
		}
		zend_string_release(str);
        }

+	if (opline->extended_value) {
+		zend_write("\n", 1);
+	}
+
        FREE_OP1();
        ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();
 }
```

We simply have to check if the extended value is set, and if so, output a new line.

You may be wondering how the VM knows to differentiate between `echo` and `print`, so that a value can be returned for `print`. The VM itself doesn't differentiate between them because it doesn't have to. `print`s return value is set during the compilation stage, and because the `ZEND_ECHO` opcode does not have an associated return value, the VM does not need to touch the return value that was previously set.

To try out the new `echoln` and `println` language constructs, the VM will firstly have to be regenerated with:
```
cd Zend && php zend_vm_gen.php
cd ..
```

Before we finish up, there's just one final thing we need to do: update PHP's internal AST pretty printer (used to turn PHP expressions in `assert` into stringified forms for error messages). We do this by updating the [Zend/zend_ast.c](https://github.com/php/php-src/blob/c9223fd6b2b715680ea800fcde784c60fc25af8b/Zend/zend_ast.c) file with the following:
```diff
                case ZEND_AST_PRINT:
-                       PREFIX_OP("print ", 60, 61);
+                       if (!ast->attr) {
+                               PREFIX_OP("print ", 60, 61);
+                       } else {
+                               PREFIX_OP("println ", 60, 61);
+                       }
@@ ... @@
                case ZEND_AST_ECHO:
-                       APPEND_NODE_1("echo");
+                       if (!ast->attr) {
+                               APPEND_NODE_1("echo");
+                       } else {
+                               APPEND_NODE_1("echoln");
+                       }
```

Now, the following code will output the correct result:
```php
assert(0 && println 1);
/*
Warning: assert(): assert(0 && (println 1)) failed in Command line code on line 1
*/
```

## Conclusion

Let's just recap how these two simple language constructs were added to the language:
 - by having them recognised as separate tokens (in the lexer)
 - creating rules for where these tokens can be used and generating AST nodes for them (in the parser)
 - setting the extended values of these AST nodes to their associated [`zend_op`](https://phpinternals.net/docs/zend_op) structure (in the compiler)
 - updating the respective opcode handler to do something with this extended value (in the VM)

That's all there really is to it!
